[{"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\index.js":"1","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\App.js":"2","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\reportWebVitals.js":"3","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\store.js":"4","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\gotodesktop.js":"5","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\restore.js":"6","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Support.js":"7","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Reset.js":"8","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Btc.js":"9","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Auth.js":"10","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Refill.js":"11","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Header\\Header.js":"12","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\CompletePay.js":"13","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Start\\Start.js":"14","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Usd.js":"15","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Invite.js":"16","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Withdraw.js":"17","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\CompleteWith.js":"18","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\Ads.js":"19","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\sound\\Playlist.js":"20","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Main.js":"21","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\index.js":"22","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\index.js":"23","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\music.js":"24","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Preloader.js":"25","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Graph.js":"26","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Time.js":"27","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Rect\\Rect.js":"28","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\game.js":"29","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\api\\User.js":"30","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\ru.js":"31","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\en.js":"32","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Online.js":"33","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Rates.js":"34","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\RightSector.js":"35","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\fireworks.js":"36","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Dashboard.js":"37","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\types.js":"38","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\sound\\Sound.js":"39","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\game.js":"40","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\sound.js":"41","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\entry.js":"42","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\api\\Api.js":"43","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Timer.js":"44","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Presentation.js":"45","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step1.js":"46","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step3.js":"47","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step5.js":"48","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step4.js":"49","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step2.js":"50","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\index.js":"51","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\index.js":"52","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\ImagePreview.js":"53","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\Tabs.js":"54","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\FormInput.js":"55","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\index.js":"56","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Audience\\index.js":"57","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Method\\index.js":"58","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Footer\\index.js":"59","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\useImagePreview.js":"60","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\Duration.js":"61","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Method\\Method.js":"62","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Audience\\Audience.js":"63","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Footer\\Footer.js":"64","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Method\\components\\index.js":"65","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Method\\components\\RadioButtonBlock.js":"66","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\privacy.en.js":"67","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\privacy.ru.js":"68","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\advertising.js":"69","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\ListAds.js":"70","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Wallet.js":"71"},{"size":591,"mtime":1614091503470,"results":"72","hashOfConfig":"73"},{"size":5318,"mtime":1614781998550,"results":"74","hashOfConfig":"73"},{"size":375,"mtime":1614091503473,"results":"75","hashOfConfig":"73"},{"size":213,"mtime":1614091503473,"results":"76","hashOfConfig":"73"},{"size":703,"mtime":1614077203770,"results":"77","hashOfConfig":"73"},{"size":3887,"mtime":1614675032845,"results":"78","hashOfConfig":"73"},{"size":1879,"mtime":1614266148398,"results":"79","hashOfConfig":"73"},{"size":4643,"mtime":1614267107952,"results":"80","hashOfConfig":"73"},{"size":7011,"mtime":1614268919723,"results":"81","hashOfConfig":"73"},{"size":14934,"mtime":1614694562443,"results":"82","hashOfConfig":"73"},{"size":3568,"mtime":1614586636062,"results":"83","hashOfConfig":"73"},{"size":11474,"mtime":1614784339734,"results":"84","hashOfConfig":"73"},{"size":1440,"mtime":1614266243057,"results":"85","hashOfConfig":"73"},{"size":8880,"mtime":1614610450774,"results":"86","hashOfConfig":"73"},{"size":4384,"mtime":1614266025599,"results":"87","hashOfConfig":"73"},{"size":3532,"mtime":1614265690058,"results":"88","hashOfConfig":"73"},{"size":3638,"mtime":1614266122072,"results":"89","hashOfConfig":"73"},{"size":1581,"mtime":1614266391240,"results":"90","hashOfConfig":"73"},{"size":1810,"mtime":1614702894604,"results":"91","hashOfConfig":"73"},{"size":2336,"mtime":1614682068018,"results":"92","hashOfConfig":"73"},{"size":7821,"mtime":1614679150887,"results":"93","hashOfConfig":"73"},{"size":2281,"mtime":1614610450803,"results":"94","hashOfConfig":"73"},{"size":427,"mtime":1614702894606,"results":"95","hashOfConfig":"73"},{"size":1805,"mtime":1614684182451,"results":"96","hashOfConfig":"73"},{"size":964,"mtime":1614091503410,"results":"97","hashOfConfig":"73"},{"size":10579,"mtime":1614675032846,"results":"98","hashOfConfig":"73"},{"size":973,"mtime":1614610450750,"results":"99","hashOfConfig":"73"},{"size":232,"mtime":1614091503410,"results":"100","hashOfConfig":"73"},{"size":2184,"mtime":1614091503471,"results":"101","hashOfConfig":"73"},{"size":1769,"mtime":1614766433483,"results":"102","hashOfConfig":"73"},{"size":13920,"mtime":1614783548605,"results":"103","hashOfConfig":"73"},{"size":11206,"mtime":1614783534083,"results":"104","hashOfConfig":"73"},{"size":2659,"mtime":1614251434317,"results":"105","hashOfConfig":"73"},{"size":4076,"mtime":1614610450749,"results":"106","hashOfConfig":"73"},{"size":7635,"mtime":1614773684039,"results":"107","hashOfConfig":"73"},{"size":9768,"mtime":1614091503416,"results":"108","hashOfConfig":"73"},{"size":19410,"mtime":1614705571579,"results":"109","hashOfConfig":"73"},{"size":2409,"mtime":1614702894608,"results":"110","hashOfConfig":"73"},{"size":1266,"mtime":1614610450805,"results":"111","hashOfConfig":"73"},{"size":3806,"mtime":1614610450804,"results":"112","hashOfConfig":"73"},{"size":2223,"mtime":1614684241351,"results":"113","hashOfConfig":"73"},{"size":2846,"mtime":1614610450804,"results":"114","hashOfConfig":"73"},{"size":338,"mtime":1614766416450,"results":"115","hashOfConfig":"73"},{"size":1720,"mtime":1614269502354,"results":"116","hashOfConfig":"73"},{"size":904,"mtime":1614593700515,"results":"117","hashOfConfig":"73"},{"size":3956,"mtime":1614675032886,"results":"118","hashOfConfig":"73"},{"size":2590,"mtime":1614603167841,"results":"119","hashOfConfig":"73"},{"size":2562,"mtime":1614603093381,"results":"120","hashOfConfig":"73"},{"size":4450,"mtime":1614609551000,"results":"121","hashOfConfig":"73"},{"size":2539,"mtime":1614603217675,"results":"122","hashOfConfig":"73"},{"size":255,"mtime":1614330813174,"results":"123","hashOfConfig":"73"},{"size":73,"mtime":1614330813166,"results":"124","hashOfConfig":"73"},{"size":1302,"mtime":1614787325000,"results":"125","hashOfConfig":"73"},{"size":1589,"mtime":1614330813165,"results":"126","hashOfConfig":"73"},{"size":3764,"mtime":1614330928404,"results":"127","hashOfConfig":"73"},{"size":39,"mtime":1614330813166,"results":"128","hashOfConfig":"73"},{"size":39,"mtime":1614330813163,"results":"129","hashOfConfig":"73"},{"size":37,"mtime":1614330813171,"results":"130","hashOfConfig":"73"},{"size":37,"mtime":1614330813168,"results":"131","hashOfConfig":"73"},{"size":272,"mtime":1614330813184,"results":"132","hashOfConfig":"73"},{"size":939,"mtime":1614330813164,"results":"133","hashOfConfig":"73"},{"size":1050,"mtime":1614330813169,"results":"134","hashOfConfig":"73"},{"size":933,"mtime":1614330813163,"results":"135","hashOfConfig":"73"},{"size":266,"mtime":1614330813167,"results":"136","hashOfConfig":"73"},{"size":67,"mtime":1614330813170,"results":"137","hashOfConfig":"73"},{"size":497,"mtime":1614330813169,"results":"138","hashOfConfig":"73"},{"size":4742,"mtime":1614610450801,"results":"139","hashOfConfig":"73"},{"size":4742,"mtime":1614610450802,"results":"140","hashOfConfig":"73"},{"size":1442,"mtime":1614702894606,"results":"141","hashOfConfig":"73"},{"size":3975,"mtime":1614784291762,"results":"142","hashOfConfig":"73"},{"size":1271,"mtime":1614782394752,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"1cuy0ak",{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"146"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"146"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"146"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"146"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"146"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"146"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"146"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"146"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"146"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"146"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"146"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"146"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"146"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"146"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\index.js",[],["301","302"],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\App.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\reportWebVitals.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\store.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\gotodesktop.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\restore.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Support.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Reset.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Btc.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Auth.js",["303"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\nimport PhoneInput from 'react-phone-number-input';\r\nimport './auth.scss';\r\nimport arrow_btn from \"../../images/arrow-btn.png\";\r\nimport {authorization, betWin, registration} from \"../../redux/actions\";\r\nimport {User} from \"../../api/User\";\r\nimport {fireworks, muteToggle, playClick} from \"../../redux/actions/music\";\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\n\r\nconst Auth = ({reg, authorization, registration, muteToggle, mute, betWin, fireworks, history, widthMode, currentLang, playClick}) => {\r\n    const [password, setPassword] = useState(true)\r\n    const [passwordConfirm, setPasswordConfirm] = useState(true)\r\n    const [name, setName] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [pass, setPass] = useState('')\r\n    const [confpass, setConfpass] = useState('')\r\n    const [code, setCode] = useState('')\r\n    const [enterCode, setEnterCode] = useState(false)\r\n    const [err, setErr] = useState('')\r\n    const [privacy, setPrivacy] = useState(false)\r\n    const [country, setCountry] = useState(\"US\")\r\n\r\n    const LANG = currentLang === \"en\" ? EN : RU\r\n\r\n    const phoneRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        fetch('https://extreme-ip-lookup.com/json/')\r\n            .then( res => res.json())\r\n            .then(response => {\r\n                setCountry(response.countryCode);\r\n            })\r\n            .catch((data, status) => {\r\n                console.log('Request failed:', data);\r\n            });\r\n    },[])\r\n    const moveCaretToEnd = () => {\r\n        if (phoneRef.createTextRange) {\r\n            const r = phoneRef.createTextRange();\r\n            r.collapse(false);\r\n            r.select();\r\n        }\r\n    }\r\n    const clearData = () => {\r\n        setName('');\r\n        setPhone('');\r\n        setEmail('');\r\n        setPass('');\r\n        setConfpass('');\r\n        setErr('');\r\n        setCode('');\r\n        setEnterCode(false);\r\n    }\r\n    const setPhoneNumber = (value) => {\r\n        setPhone(value);\r\n    }\r\n\r\n    const checkForLatin = event => {\r\n        let val = event.replace(/[^\\x00-\\x7F]/ig, '');\r\n        setName(val);\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        const body = JSON.stringify({name, phone, email, pass, confpass});\r\n        if (confpass.length < 8 || confpass.length < 8) {\r\n            setErr('Password length must be 8 characters')\r\n        } else {\r\n            User.register(body)\r\n                .then(data => {\r\n                    if (data.data.status === \"success\") {\r\n                        setEnterCode(true);\r\n                    } else {\r\n                        if (data.data.error) {\r\n                            setErr(data.data.error);\r\n                        } else return false;\r\n                    }\r\n                })\r\n                .catch(error => setErr(error.response.data.error))\r\n        }\r\n    }\r\n    const codeSubmit = (e) => {\r\n        e.preventDefault();\r\n        User.code({code: code})\r\n            .then(res => {\r\n                if (res.data.status === \"success\") {\r\n                    sessionStorage.setItem('token', res.data.data.accessToken);\r\n                    authorization();\r\n                } else {\r\n                    if (res.data.error) {\r\n                        setErr(res.data.error);\r\n                    } else return false;\r\n                }\r\n            })\r\n            .catch(error => setErr(error.response.data.error))\r\n    }\r\n\r\n    const handleLogin = event => {\r\n        event.preventDefault();\r\n        const body = JSON.stringify({phone, pass});\r\n\r\n        User.login(body)\r\n            .then(res => res)\r\n            .then(data => {\r\n                    if (data.data.status === \"success\") {\r\n                        sessionStorage.setItem('token', data.data.data.accessToken);\r\n                        history.push('/game');\r\n                        if (!mute) {\r\n                            muteToggle()\r\n                        }\r\n                        return authorization();\r\n                    } else if (data.data.error) {\r\n                        return setErr(data.data.error);\r\n                    } else {\r\n                        return setErr('error, try again later')\r\n                    }\r\n                }\r\n            )\r\n            .catch(error => setErr(error.response.data.error));\r\n    }\r\n    if (reg) {\r\n\r\n        if (enterCode) {\r\n            return (\r\n                <div className=\"round-dark auth\">\r\n                         <span onClick={() => {\r\n                             setEnterCode(false);\r\n                             clearData();\r\n                             playClick()\r\n                         }} className=\"back\">&larr;</span>\r\n                    <h2>Enter code</h2>\r\n                    <form onSubmit={e => codeSubmit(e)}>\r\n                        <div className=\"\">\r\n                            <input value={code} onInput={e => setCode(e.target.value)} id=\"code\" name=\"code\" type=\"text\"\r\n                                   required/>\r\n                        </div>\r\n                        <span style={{display: err ? 'block' : 'none'}} className=\"error red\">{err}</span>\r\n                        <button type=\"submit\" onClick={playClick}>SEND</button>\r\n                    </form>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                privacy\r\n                    ? <div style={{display: privacy ? \"block\" : \"none\"}} className=\"round-dark auth privacy-block\">\r\n                        <span onClick={() => {\r\n                            playClick();\r\n                            setPrivacy(false);\r\n                        }} className=\"back\">\r\n                        &larr;\r\n                        </span>\r\n                    <p>\r\n                        <h2>{LANG.Auth.Register.privacy}</h2>\r\n                        {LANG.Auth.Register.text}\r\n                    </p>\r\n                </div>\r\n                    : <div className=\"round-dark auth\">\r\n\r\n                    <span onClick={() => {\r\n                        registration();\r\n                        clearData();\r\n                        playClick()\r\n                    }} className=\"back\">&larr;</span>\r\n                    <h2 className={currentLang}>{LANG.Auth.Register.title}</h2>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"\">\r\n                            <label className={currentLang} htmlFor=\"name\">{LANG.Auth.Register.nameTitle}</label>\r\n                            <input onChange={e => {\r\n                                checkForLatin(e.target.value);\r\n                                // setName(e.target.value);\r\n                                setErr('');\r\n                            }} value={name}\r\n                                   placeholder={LANG.Auth.Register.name}\r\n                                   id=\"name\" name=\"name\" type=\"text\" required/>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <label className={currentLang} htmlFor=\"phone\">{LANG.Auth.Register.phoneTitle}</label>\r\n                            <PhoneInput onChange={e => {\r\n                                setErr('');\r\n                                setPhoneNumber(e);\r\n                                moveCaretToEnd();\r\n                            }} id=\"phone\" ref={phoneRef} limitMaxLength={true} placeholder={LANG.Auth.Register.phone}\r\n                                        value={phone} international\r\n                                        defaultCountry={country}\r\n                                        displayInitialValueAsLocalNumber required/>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <label className={currentLang} htmlFor=\"email\">{LANG.Auth.Register.emailTitle}</label>\r\n                            <input onChange={e => {\r\n                                setEmail(e.target.value);\r\n                                setErr('');\r\n                            }}\r\n                                   value={email}\r\n                                   placeholder={LANG.Auth.Register.email}\r\n                                   id=\"email\" name=\"email\" type=\"email\" required/>\r\n                        </div>\r\n                        <div className={password ? 'pass' : 'text'}>\r\n                            <span onClick={() => {\r\n                                setPassword(!password);\r\n                                playClick()\r\n                            }} className=\"eye\"/>\r\n                            <label className={currentLang} htmlFor=\"password\">{LANG.Auth.Register.password}</label>\r\n                            <input min='8' onChange={e => {\r\n                                setPass(e.target.value);\r\n                                setErr('');\r\n                            }}\r\n                                   value={pass}\r\n                                   id=\"password\" name=\"password\" type={password ? 'password' : 'text'} required/>\r\n                        </div>\r\n                        <div className={passwordConfirm ? 'pass' : 'text'}>\r\n                            <span onClick={() => {\r\n                                setPasswordConfirm(!passwordConfirm);\r\n                                playClick()\r\n                            }} className=\"eye\"/>\r\n                            <label className={currentLang}\r\n                                   htmlFor=\"passwordConfirm\">{LANG.Auth.Register.passwordRepeat}</label>\r\n                            <input min='8' onChange={e => {\r\n                                setConfpass(e.target.value);\r\n                                setErr('');\r\n                            }}\r\n                                   value={confpass}\r\n                                   id=\"passwordConfirm\" name=\"passwordConfirm\"\r\n                                   type={passwordConfirm ? 'password' : 'text'}\r\n                                   required/>\r\n                        </div>\r\n                        <span style={{display: err ? 'block' : 'none'}} className=\"error red\">{err}</span>\r\n                        <button className={currentLang} onClick={playClick}>{LANG.Auth.Register.signUp}</button>\r\n                        <div className=\"privacy\">\r\n\r\n                            <label>\r\n                                <input type=\"checkbox\" id=\"privacy\" required/>\r\n                                <span>{LANG.Auth.Register.begin}\r\n                                    <span onClick={()=>setPrivacy(true)} className=\"gold link\">{LANG.Auth.Register.legal + \" \"} </span> {\" \" + LANG.Auth.Register.and}\r\n                                    <span onClick={()=>setPrivacy(true)} className=\"gold link\"> {LANG.Auth.Register.privacy}</span>\r\n                                </span>\r\n                            </label>\r\n                            <div className='text'>\r\n                                <label className={currentLang}\r\n                                       htmlFor=\"promo\">{LANG.Auth.Register.promo}</label>\r\n                                <input id=\"promo\" name=\"promo\" type=\"text\"/>\r\n                                <button type=\"button\" className=\"arrow-btn\">\r\n                                    <img src={arrow_btn} width=\"24\" alt=\"arrow\"/>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <Link to='/support' className={currentLang + \" support-link\"}\r\n                              onClick={playClick}>{LANG.support}</Link>\r\n                    </form>\r\n\r\n                </div>\r\n            );\r\n        }\r\n    } else {\r\n        return (\r\n            <div className=\"round-dark auth\">\r\n               <span onClick={() => {\r\n                   clearData();\r\n                   playClick()\r\n               }} className=\"back\"><Link to=\"/\">&larr;</Link></span>\r\n                <h2 className={currentLang}>{LANG.Auth.Login.title}</h2>\r\n                <form onSubmit={handleLogin}>\r\n                    <div className=\"\">\r\n                        <label className={currentLang} htmlFor=\"phone\">{LANG.Auth.Login.phoneTitle}</label>\r\n                        <PhoneInput onChange={e => {\r\n                            setPhone(e);\r\n                            setErr('');\r\n                        }} id=\"phone\" limitMaxLength={true} placeholder={LANG.Auth.Login.phone} value={phone}\r\n                                    international\r\n                                    defaultCountry={country}\r\n                                    displayInitialValueAsLocalNumber required/>\r\n                    </div>\r\n                    <div className={password ? 'pass' : 'text'}>\r\n                        <span onClick={() => {\r\n                            setPassword(!password);\r\n                            playClick()\r\n                        }} className=\"eye\"/>\r\n                        <label className={currentLang} htmlFor=\"password\">{LANG.Auth.Login.password}</label>\r\n                        <input onInput={e => {\r\n                            setPass(e.target.value);\r\n                            setErr('');\r\n                        }} id=\"password\" name=\"password\"\r\n                               type={password ? 'password' : 'text'} required/>\r\n                    </div>\r\n                    <span style={{display: err ? 'block' : 'none'}} className=\"error red\">{err}</span>\r\n                    <Link to=\"/restore\" className={currentLang + \" forgot mb-3\"}\r\n                          onClick={playClick}>{LANG.Auth.Login.forgotPassword}</Link>\r\n                    <button className={currentLang} onClick={playClick}>{LANG.Auth.Login.loginIn}</button>\r\n                    <span className={currentLang}>{LANG.Auth.Login.or}</span>\r\n                    <button className={currentLang} onClick={e => {\r\n                        e.preventDefault();\r\n                        registration();\r\n                        clearData();\r\n                        playClick();\r\n                    }}>{LANG.Auth.Login.signUp}\r\n                    </button>\r\n                    <Link to=\"/support\" className={currentLang + \" support-link\"}\r\n                          onClick={playClick}>{LANG.support}</Link>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        reg: state.authReducer.reg,\r\n        mute: state.soundReducer.mute,\r\n        widthMode: state.switchOptions.widthMode,\r\n        currentLang: state.switchOptions.lang\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    authorization,\r\n    registration,\r\n    muteToggle,\r\n    betWin,\r\n    fireworks,\r\n    playClick\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Refill.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Header\\Header.js",["304","305"],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\CompletePay.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Start\\Start.js",["306","307","308"],"import React, {useState, useEffect} from 'react';\r\nimport './start.scss';\r\nimport Graph from \"../Graph\";\r\nimport Time from \"../Main/Time\";\r\nimport bitcoin from \"../../images/bitcoin.svg\";\r\nimport {connect} from \"react-redux\";\r\nimport arrowDown from \"../../images/arrowDown.svg\";\r\nimport arrowUp from \"../../images/arrowUp.svg\";\r\nimport bull from \"../../images/bull_start.png\";\r\nimport bear from \"../../images/bear_start.png\";\r\nimport Rect from \"../Main/Rect/Rect\";\r\nimport Preloader from \"../Main/Preloader\";\r\nimport bitsybets from \"../../images/BITCYBETS.svg\";\r\nimport coin from \"../../images/coin.svg\";\r\nimport {userdata} from \"../../redux/actions/game\";\r\nimport {registration} from \"../../redux/actions\";\r\nimport {playClick, up_down, startWin} from \"../../redux/actions/music\";\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\n\r\nconst Start = ({currentCourse, course, history, lastSeconds, userdata, widthMode, registration, currentLang, playClick, up_down, startWin}) => {\r\n    const [timeGame, setTimeGame] = useState(false);\r\n    const [bet, setBet] = useState('');\r\n    const [predict, setPredict] = useState('');\r\n\r\n    const LANG = currentLang === \"en\" ? EN : RU\r\n\r\n    useEffect(() => {\r\n        if (lastSeconds % 10 === 0) {\r\n            setTimeGame(true);\r\n        }\r\n    }, [lastSeconds])\r\n    useEffect(() => {\r\n        if (lastSeconds % 10 === 0) {\r\n            if (bet === 'down' && currentCourse < course[course.length - 2]) {\r\n                setPredict('win');\r\n                setBet('');\r\n                startWin()\r\n            } else if (bet === 'down' && currentCourse > course[course.length - 2]) {\r\n                setPredict('lose');\r\n                setBet('');\r\n                startWin()\r\n            } else if (bet === 'up' && currentCourse > course[course.length - 2]) {\r\n                setPredict('win');\r\n                setBet('');\r\n                startWin()\r\n            } else if (bet === 'up' && currentCourse < course[course.length - 2]) {\r\n                setPredict('lose');\r\n                setBet('');\r\n                startWin()\r\n            } else {\r\n                setBet('');\r\n            }\r\n        }\r\n\r\n    }, [currentCourse])\r\n    return (\r\n        <div  className=\"start\">\r\n            {/*<div style={{display: predict === 'win' ? \"block\" : \"none\"}} className=\"blur soon\">*/}\r\n            {/*    <div className=\"round-dark win\">*/}\r\n            {/*        <div className=\"win-btn\">*/}\r\n            {/*            <h2>Sorry, you're out of luck! <br/> try again!</h2>*/}\r\n            {/*            <button onClick={() => {*/}\r\n            {/*                setPredict('');*/}\r\n            {/*                setBet('');*/}\r\n            {/*            }} className=\"btn btn-primary\">OK*/}\r\n            {/*            </button>*/}\r\n            {/*        </div>*/}\r\n            {/*    </div>*/}\r\n            {/*</div>*/}\r\n            \r\n            \r\n            <div style={{display: predict ? \"block\" : \"none\"}} className=\"blur soon\">\r\n                <div className=\"round-dark win\">\r\n                    <div className=\"win-btn\">\r\n                       <span onClick={() => {\r\n                           setPredict('');\r\n                           setBet('');\r\n                           playClick()\r\n                       }} className=\"chross\">&#10008;</span>\r\n                        <h2 className={currentLang}>{LANG.Main.Modal.title.first} <br/> {currentLang === \"en\" ? LANG.Main.Modal.title.second : null}</h2>\r\n                        {/* <h2>{currentLang === \"en\" ? LANG.Main.Modal.title.first <br/> LANG.Main.Modal.title.second : LANG.Main.Modal.title.first}</h2> */}\r\n                        {/* <h2>You did great! <br/> Join now!</h2> */}\r\n                        <button onClick={() => {\r\n                            setPredict('');\r\n                            setBet('');\r\n                            history.push('/login');\r\n                            playClick()\r\n                        }} className={currentLang + \" btn btn-primary\"}>\r\n                            {LANG.Main.Modal.logIn}\r\n                        </button>\r\n                        <button onClick={() => {\r\n                            setPredict('');\r\n                            setBet('');\r\n                            history.push('/signup');\r\n                            registration();\r\n                            playClick()\r\n                        }} className={currentLang + \" btn btn-primary\"}>\r\n                            {LANG.Main.Modal.signUp}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`${widthMode}-start round round-dark`}>\r\n                <div className=\"bull-start-mobile\"><img src={bull} width=\"\" alt=\"bull\"/></div>\r\n                <div className=\"bear-start-mobile\"><img src={bear} width=\"\" alt=\"bear\"/></div>\r\n                <div className=\"bull-start\"><img src={bull} alt=\"bull\"/></div>\r\n                <div className=\"bear-start\"><img src={bear} alt=\"bear\"/></div>\r\n                <div className=\"text text-center\">\r\n                    <h2>\r\n                        <span className=\"gold\">BITCY</span>BETS     \r\n                    </h2>\r\n                    <p className={currentLang + \" mt-3\"}>{LANG.Main.Start.content}</p>\r\n                </div>\r\n                <div className=\"dark\">\r\n                    <Time/>\r\n                    <div className=\"course\">\r\n                        <h2 style={{opacity: !currentCourse ? 0 : 1}} className=\"text-center\"><img src={bitcoin} alt=\"course\"/>\r\n                            {currentCourse} <span>$</span>\r\n                        </h2>\r\n                        <div>\r\n                            {/*<SelectList/>*/}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{display: !currentCourse ? \"none\" : \"block\"}} className=\"graph\">\r\n                        <Graph gradient1={20} gradient2={150} chartHeight={widthMode === \"desktop\" ? 200 : 150}/>\r\n                    </div>\r\n                    <div style={{display: currentCourse ? \"none\" : \"block\"}}  className=\"load\">\r\n                        <div className=\"wrap-img-preload\">\r\n                            <img className=\"coin1\"  src={coin} alt=\"\"/>\r\n                            <img className=\"coin2\"  src={coin} alt=\"\"/>\r\n                            <img className=\"coin3\"  src={coin} alt=\"\"/>\r\n                            <img className=\"coin4\"  src={coin} alt=\"\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"buttons\">\r\n                        <div className=\"wrap-btn\">\r\n                            <button disabled={bet || !currentCourse} onClick={() => {setBet('down'); up_down()}}\r\n                                    className={currentLang + \" btn green green-start predict-btn\"}\r\n                                    id=\"down\">\r\n                                        <span className={currentLang + \" green\"}>{LANG.Main.Start.btnUp}</span>\r\n                                <img src={arrowUp} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                <Rect start={timeGame} infinite={'infinity'} idButton={'down'}\r\n                                      mode={timeGame ? 'rectUp' : ''}/>\r\n                            </button>\r\n                            <button disabled={bet || !currentCourse} onClick={() => {setBet('up'); up_down()}}\r\n                                    className={currentLang + \" btn red red-start predict-btn\"}\r\n                                    id=\"down\">\r\n                                        <span className={currentLang + \" red\"}>{LANG.Main.Start.btnDown}</span>\r\n                                <img src={arrowDown} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                <Rect infinite={'infinity'} idButton={'down'} mode={timeGame ? 'rectDown' : ''}/>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"bg\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentCourse: state.courseReducer.currentCourse,\r\n        course: state.courseReducer.course,\r\n        lastSeconds: state.courseReducer.lastSeconds,\r\n        widthMode: state.switchOptions.widthMode,\r\n        currentLang: state.switchOptions.lang\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    userdata,\r\n    registration,\r\n    playClick,\r\n    up_down,\r\n    startWin\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Start);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Usd.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Invite.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Withdraw.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\CompleteWith.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\Ads.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\sound\\Playlist.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Main.js",["309","310","311"],"import React, { useEffect } from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport './main.scss';\r\nimport bitcoin from '../../images/bitcoin.svg';\r\nimport Graph from \"../Graph\";\r\nimport RightSector from \"./RightSector\";\r\nimport Dashboard from \"./Dashboard\";\r\n// import SelectList from \"./SelectList\";\r\nimport {closeCongratulation, closeYourLose, createAd, logoutQuestion, prohibition, switchView} from \"../../redux/actions\";\r\nimport {money, stop, you_lose, add_to_wallet, playClick} from \"../../redux/actions/music\";\r\nimport JS_FIREWORKS from \"../fireworks\";\r\nimport Time from \"./Time\";\r\nimport Preloader from \"./Preloader\";\r\nimport {userdata} from \"../../redux/actions/game\";\r\nimport Rates from \"./Rates\";\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\nimport Online from \"./Online\";\r\nimport Presentation from \"../Intro/Presentation\";\r\n\r\nconst fire = () => {\r\n    // document.getElementById('fireworks-canvas').style.width = '100%'\r\n    // document.getElementById('fireworks-canvas').style.height = '100%'\r\n    // const firework = JS_FIREWORKS.Fireworks({\r\n    //     id: 'fireworks-canvas',\r\n    //     hue: 120,\r\n    //     particleCount: 100,\r\n    //     delay: 0,\r\n    //     minDelay: 5,\r\n    //     maxDelay: 10,\r\n    //     boundaries: {\r\n    //         top: 50,\r\n    //         bottom: 240,\r\n    //         left: 50,\r\n    //         right: 590\r\n    //     },\r\n    //     fireworkSpeed: 2,\r\n    //     fireworkAcceleration: 1.05,\r\n    //     particleFriction: .95,\r\n    //     particleGravity: 1.5\r\n    // });\r\n    // firework.start();\r\n};\r\n\r\nconst Main = ({history, step, view, switchView, course, lastWin, closeCongratulation, congratulation, yourlose, closeYourLose, currentCourse, money, muteToggle, logout, logoutQuestion, prohibition, userdata, lastWinGame, createAd, createAdProp, widthMode, currentLang, you_lose, add_to_wallet, playClick}) => {\r\n\r\n    useEffect(() => {\r\n        userdata();\r\n        fire();\r\n    }, [congratulation, userdata]);\r\n    useEffect(() => {fire()}, []);\r\n    useEffect(()=> switchView(false), []);\r\n\r\n    const LANG = currentLang === \"en\" ? EN : RU;\r\n    let flag = course ? course.length : false;\r\n    return (\r\n        <div className={`${widthMode}-bg main`}>\r\n            <Preloader show={flag}/>\r\n            {/* <div style={{display: congratulation ? \"block\" : \"none\"}} className=\"blur\">\r\n                <canvas width=\"640\" height=\"480\" id=\"fireworks-canvas\" style={{background: 'rgba(0,0,0, .2)'}}/>\r\n                <div className=\"round-dark win\">\r\n                    <h2 className=\"currentLang\">{LANG.BettingRealMoney.WinningAndLosing.Winning.title}</h2>\r\n                    <div className={currentLang + \" text-center\"}>{LANG.BettingRealMoney.WinningAndLosing.Winning.youWon} {lastWinGame || 1} <img src={bitcoin} width=\"15\" alt=\"bit\"/>\r\n                    </div>\r\n                    <div className=\"win-btn\">\r\n                        <button onClick={() => {\r\n                            closeCongratulation();\r\n                            userdata();\r\n                            document.getElementById('fireworks').pause();\r\n                            // money();\r\n                            add_to_wallet();\r\n                        }} className={currentLang + \" btn btn-primary\"}>{LANG.BettingRealMoney.WinningAndLosing.Winning.btnAddToWallet}\r\n                        </button>\r\n                        <button disabled onClick={() => {\r\n                            closeCongratulation();\r\n                            userdata();\r\n                            playClick()\r\n                            document.getElementById('fireworks').pause();\r\n                            // money();\r\n                        }} className={currentCourse + \" btn btn-primary\"}>{LANG.BettingRealMoney.WinningAndLosing.Winning.btnWithdraw}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div style={{display: yourlose ? \"block\" : \"none\"}} className=\"blur\">\r\n                <div className=\"round-dark win\">\r\n                    <h2>Your lose</h2>\r\n                    <div className=\"win-btn\">\r\n                        <button onClick={() => {\r\n                            closeYourLose();\r\n                            userdata();\r\n                            playClick()\r\n                        }} className=\"btn btn-primary\">Bet again\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n            <div style={{display: createAdProp ? \"block\" : \"none\"}} className=\"blur soon\">\r\n                <div className=\"round-dark win\">\r\n                    <div className=\"win-btn\">\r\n                        <h2>This feature coming soon</h2>\r\n                        <button onClick={() => {\r\n                            createAd();\r\n                            playClick()\r\n                        }} className=\"btn btn-primary\">OK\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <main style={{display: flag ? 'block' : 'none'}}>\r\n                <div className=\"row main\">\r\n                    <Presentation />\r\n                    <div style={{display: widthMode === \"mobile\" && view ? \"none\" : \"flex\"}} className=\"left-sector\">\r\n                        {widthMode === \"mobile\" ? <Rates/> : <></>}\r\n                        <div style={{zIndex: step === 1 ?  \"10\" : \"\" } } className={`${widthMode} round globe`}>\r\n                            {widthMode === \"desktop\" ? <Time/> : <></>}\r\n                            <div>\r\n                                <h2 className=\"text-center\"><img src={bitcoin} className=\"m-2\" alt=\"course\"/>\r\n                                    {currentCourse} <span>$</span>\r\n                                </h2>\r\n                                <div>\r\n                                    {widthMode === \"desktop\" ? <Online/> : <></>}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"graph-wrapper\">\r\n                                <div className=\"graph\">\r\n                                    <Graph gradient1={widthMode === \"desktop\" ? undefined : 20}\r\n                                           gradient2={widthMode === \"desktop\" ? undefined : 150}\r\n                                           chartHeight={widthMode === \"desktop\" ? 250 : 150}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <Dashboard/>\r\n                    </div>\r\n                    {widthMode === \"desktop\" ? <RightSector/> : <></>}\r\n                    {widthMode === \"mobile\" && view ? <RightSector/> : <></>}\r\n\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        course: state.courseReducer.course,\r\n        currentCourse: state.courseReducer.currentCourse,\r\n        lastWin: state.balanceReducer.lastWin,\r\n        lastWinGame: state.balanceReducer.lastWinGame,\r\n        congratulation: state.balanceReducer.congratulation,\r\n        yourlose: state.balanceReducer.yourlose,\r\n        logout: state.authReducer.logoutQuestion,\r\n        createAdProp: state.switchOptions.createAd,\r\n        widthMode: state.switchOptions.widthMode,\r\n        view: state.switchOptions.view,\r\n        currentLang: state.switchOptions.lang,\r\n        step: state.switchOptions.step\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    closeCongratulation,\r\n    closeYourLose,\r\n    money,\r\n    stop,\r\n    logoutQuestion,\r\n    prohibition,\r\n    userdata,\r\n    createAd,\r\n    you_lose,\r\n    add_to_wallet,\r\n    playClick,\r\n    switchView\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\music.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Preloader.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Graph.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Time.js",["312"],"import React, {useEffect, useState} from 'react';\r\nimport {geoposition} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Time = ({geo, geoposition}) => {\r\n    useEffect(() => {\r\n        geoposition()\r\n    },[]);\r\n    useEffect(() => {\r\n        const clock = setInterval(() => setTime(new Date().toLocaleTimeString()), 1000);\r\n        return () => clearInterval(clock);\r\n    }, [])\r\n    let [time, setTime] = useState(new Date().toLocaleTimeString());\r\n    return (\r\n        <div className=\"time\">\r\n            <h2 className=\"time-text\">{time.slice(0, 5)}</h2>\r\n            <div className=\"label text-center\">{geo || <span style={{fontSize: \"10px\"}}>Please, allow location access</span>}</div>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        geo: state.geoReducer.geoposition,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    geoposition\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Time);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Rect\\Rect.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\game.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\api\\User.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\ru.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\en.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Online.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Rates.js",["313","314"],"import React, {useEffect, useState} from 'react';\r\nimport person from \"../../images/person.svg\";\r\nimport bitcoin from \"../../images/bitcoin.svg\";\r\nimport {rates} from \"../../redux/actions/game\";\r\nimport {connect} from \"react-redux\";\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\n\r\nconst Rates = ({rates, down, up, downBets, upBets, widthMode, currentLang}) => {\r\n    const mobile = widthMode === \"mobile\";\r\n    const LANG = currentLang === \"en\" ? EN : RU\r\n    const bankCoin = new Array(Math.ceil(downBets+upBets)).fill(downBets+upBets);\r\n    const upCoin = new Array(up).fill('up');\r\n    const downCoin = new Array(down).fill('down');\r\n    const fillBank = bankCoin.map((coin, index) => {\r\n        if(index > 9 && !mobile) {return null;}\r\n        if(index > 1 && mobile) {return null;}\r\n       return (<div key={index + coin} style={{height: \"36px\", width: \"100%\", bottom: index * 7 + \"px\"}} className=\"coin\"/>);\r\n    })\r\n    const fillDown = downCoin.map((coin, index) => {\r\n        if(index > 9 && !mobile) {return null;}\r\n        if(index > 1 && mobile) {return null;}\r\n        return (<div key={index + coin} style={{height: \"36px\", width: \"100%\", bottom: index * 7 + \"px\"}} className=\"coin\"/>)\r\n    })\r\n    const fillUp = upCoin.map((coin, index) => {\r\n        if(index > 9 && !mobile) {return null}\r\n        if(index > 1 && mobile) {return null}\r\n        return (<div key={index + coin} style={{height: \"36px\", width: \"100%\", bottom: index * 7 + \"px\"}} className=\"coin\"/>)\r\n    })\r\n    useEffect(() => {\r\n        const getRates = setInterval(() => {\r\n            rates();\r\n        }, 1000);\r\n        return () => clearInterval(getRates);\r\n    }, [])\r\n    const bank = downBets + upBets;\r\n    // const rateUp = 10 * ((up / down) ? (up / down) : 1);\r\n    // const rateDown = 10 * ((down / up) ? (down / up) : 1);\r\n    return (\r\n        <div className=\"round rates\">\r\n            <h2 className={currentLang + \" text-center\"}>{LANG.BettingRealMoney.UsualState.BetsInProgress.title}</h2>\r\n            <div className=\"wrap-table\">\r\n                <div className=\"rates-col rates-up\">\r\n                    {/*<img className=\"arrow\" src={arrup} alt=\"arrow\"/>*/}\r\n                    {fillUp.length ? fillUp : null}\r\n                    <div className=\"text\">\r\n                        <span className=\"mb-1 persons\">{up}<img className=\"mb-1\" src={person} alt=\"\"/></span>\r\n                    </div>\r\n                </div>\r\n                <div onClick={rates} className=\"rates-col bank\">\r\n                    {/*<img className=\"arrow middle\" src={bitcoin} alt=\"arrow\"/>*/}\r\n                    {bankCoin[0] > 0 ? fillBank : null}\r\n                    <div className=\"text\">\r\n                        <span className=\"mb-1 nowrap persons\">{bank.toFixed(4)}<img className=\"bank-img\" width=\"15\"\r\n                                                                                    height=\"20\"\r\n                                                                                    src={bitcoin} alt=\"\"/></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"rates-col rates-down\">\r\n                    {/*<img className=\"arrow\" src={arrdown} alt=\"arrow\"/>*/}\r\n                    {fillDown.length ? fillDown : null}\r\n                    <div className=\"text\">\r\n                        <span className=\"mb-1 persons\">{down}<img className=\"mb-1\" src={person} alt=\"\"/></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        down: state.balanceReducer.down,\r\n        up: state.balanceReducer.up,\r\n        downBets: state.balanceReducer.downBets,\r\n        upBets: state.balanceReducer.upBets,\r\n        widthMode: state.switchOptions.widthMode,\r\n        currentLang: state.switchOptions.lang\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    rates\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Rates);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\RightSector.js",["315","316"],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\fireworks.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Dashboard.js",["317","318","319","320","321","322","323","324","325"],"import React, {useState, useEffect} from 'react';\r\nimport bitcoin from \"../../images/bitcoin.svg\";\r\nimport arrowUp from \"../../images/arrowUp.svg\";\r\nimport arrowDown from \"../../images/arrowDown.svg\";\r\nimport {connect} from \"react-redux\";\r\nimport store from '../../redux/store'\r\nimport {betLose, betWin, closeCongratulation, closeYourLose} from \"../../redux/actions\";\r\nimport {\r\n    bell,\r\n    click,\r\n    up_down,\r\n    fireworks,\r\n    you_lose,\r\n    muteToggle,\r\n    playTimer,\r\n    playTimer2,\r\n    stop,\r\n    stopBetTimer, stopGameTimer, playBetTimer, playGameTimer, playYouWon\r\n} from \"../../redux/actions/music\";\r\nimport Rates from \"./Rates\";\r\nimport {User} from \"../../api/User\";\r\nimport {predictClear, predictDown, predictUp, userdata} from \"../../redux/actions/game\";\r\nimport Rect from \"./Rect/Rect\";\r\nimport Timer from \"./Timer\";\r\nimport Online from \"./Online\";\r\nimport YouWon from '../../images/You_won (2).png';\r\nimport GoldCoins from '../../images/Gold_coins1.png';\r\nimport CoinUpImg from '../../images/coinUp.svg'\r\nimport CoinDownImg from '../../images/coinDown.svg'\r\n\r\n\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\n\r\n\r\nconst Dashboard = ({\r\n                       stopBetTimer,\r\n                       stopGameTimer,\r\n                       playBetTimer,\r\n                       playGameTimer,\r\n                       step,\r\n                       predictUp,\r\n                       betWin,\r\n                       betLose,\r\n                       fireworks,\r\n                       userdata,\r\n                       predictClear,\r\n                       predictDown,\r\n                       balance,\r\n                       predict,\r\n                       upBets,\r\n                       downBets,\r\n                       up,\r\n                       down,\r\n                       lastSeconds,\r\n                       widthMode,\r\n                       currentLang,\r\n                       up_down,\r\n                       you_lose,\r\n                       playTimer,\r\n                       playTimer2,\r\n                       stop,\r\n                       play,\r\n                       yourlose,\r\n                       closeYourLose,\r\n                       congratulation,\r\n                       closeCongratulation,\r\n                       playYouWon,\r\n                       lastWinGame\r\n                   }) => {\r\n    const [bet, setBet] = useState(.0001);\r\n    const [counter, setCounter] = useState(10);\r\n    const [gameStart, setGameStart] = useState(undefined);\r\n    const LANG = currentLang === \"en\" ? EN : RU;\r\n    let timeBet = lastSeconds % 20 === 0 || lastSeconds % 20 === 5;\r\n    let startGame = lastSeconds % 20 === 10 || lastSeconds % 20 === 15;\r\n\r\n    useEffect(() => {\r\n        if (startGame && gameStart === undefined) {\r\n            setGameStart(lastSeconds);\r\n            predictSubmit();\r\n        }\r\n\r\n    }, [lastSeconds])\r\n\r\n    useEffect(() => {\r\n        if (startGame && !!predict) {\r\n            stopBetTimer();\r\n            playGameTimer();\r\n            playTimer();\r\n        } else if (timeBet && !!predict) {\r\n            stopGameTimer();\r\n            playBetTimer();\r\n            playTimer2();\r\n        } else {\r\n            stopBetTimer();\r\n            stopGameTimer();\r\n        }\r\n\r\n    }, [startGame, timeBet, predict])\r\n\r\n    useEffect(() => {\r\n        if (yourlose === true) {\r\n            you_lose();\r\n            setTimeout(() => {\r\n                closeYourLose()\r\n            }, 3000);\r\n        }\r\n\r\n    }, [yourlose])\r\n\r\n    useEffect(() => {\r\n        if (congratulation === true) {\r\n            playYouWon();\r\n            setTimeout(() => {\r\n                closeCongratulation()\r\n            }, 4000);\r\n        }\r\n    }, [congratulation])\r\n\r\n    const setBetHandler = (e) => {\r\n        let bet = +e.target.value.slice(0, 5);\r\n        if (!bet) {\r\n            bet = 0.0001;\r\n        }\r\n        if (bet > 1) {\r\n            bet = 1;\r\n        }\r\n        setBet(bet || 0.0001);\r\n    }\r\n    const setBetStep = (bool) => {\r\n        const bets = bool ? +bet + .0001 : +bet - .0001;\r\n        console.log('bet')\r\n        if (!bets || +bets < 0) {\r\n            console.log('false')\r\n            setBet(0.0001);\r\n        }else if (+bets > 1) {\r\n            console.log('true')\r\n            setBet(1);\r\n        } else {\r\n            setBet(+bets.toFixed(4))\r\n        //    setBet(+bets)\r\n        }\r\n    }\r\n\r\n    const betDone = (e) => {\r\n        let rate = e.target.id;\r\n        up_down();\r\n        if (rate === 'up') {\r\n            playBetTimer();\r\n            playGameTimer();\r\n            predictUp({value: bet.toString()});\r\n        } else if (rate === 'down') {\r\n            playBetTimer();\r\n            playGameTimer();\r\n            predictDown({value: bet.toString()});\r\n        }\r\n    }\r\n\r\n    const predictSubmit = () => {\r\n        const timer = setInterval(() => {\r\n            setCounter(counter - 1);\r\n        }, 1000)\r\n        return setTimeout(() => {\r\n            clearInterval(timer);\r\n            setCounter(10);\r\n            User.userdata()\r\n                .then(data => {\r\n                    if (+data.data.data.lastWin === 1 && predict !== '') {\r\n                        betWin();\r\n                        // fireworks();\r\n                    } else if (+data.data.data.lastWin === -1 && predict !== '') {\r\n                        you_lose();\r\n                        betLose();\r\n                        userdata();\r\n                    } else if (up > 0 && down > 0) {\r\n                        userdata();\r\n                    } else {\r\n                        userdata();\r\n                    }\r\n                }).catch(e => {\r\n                console.log(e)\r\n            });\r\n            setGameStart(undefined);\r\n            predictClear();\r\n        }, 10000)\r\n    }\r\n\r\n    const btnDownHandler = (e) => {\r\n        e.preventDefault();\r\n        betDone(e);\r\n    }\r\n\r\n    if (congratulation) { // congratulation\r\n        return (\r\n            <div className={`${widthMode} row bottom-container`}>\r\n                {widthMode === \"desktop\" ? <Rates/> : <></>}\r\n                <div style={{zIndex: step === 3 ? \"10\" : \"\"}} className={`${widthMode} round dashboard congratulation`}>\r\n                    <img src={YouWon} className='congratulation__youWon-img'/>\r\n                    <img src={GoldCoins} className='congratulation__coins-img'/>\r\n                    <p className='congratulation__score'>{lastWinGame} <img className='congratulation__btc'\r\n                                                                            src={bitcoin} alt='btc'/></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (yourlose) { //yourlose\r\n        return (\r\n            <div className={`${widthMode} row bottom-container`}>\r\n                {widthMode === \"desktop\" ? <Rates/> : <></>}\r\n                <div style={{zIndex: step === 3 ? \"10\" : \"\"}} className={`${widthMode} round dashboard yourLose`}>\r\n                    <h1>You lose</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (startGame) { //startGame\r\n        console.log(predict)\r\n        return (\r\n            <div className={`${widthMode} row bottom-container`}>\r\n                {widthMode === \"desktop\" ? <Rates/> : <></>}\r\n                <div style={{zIndex: step === 3 ? \"10\" : \"\"}} className={`${widthMode} round dashboard big-timer`}>\r\n                    <Timer/>\r\n                    {startGame && !predict\r\n                        ? <span style={{display: startGame && !predict ? 'inline' : 'none'}}\r\n                                className=\"off text-center\">All bets are off</span>\r\n                        : <div style={{\r\n                            display: predict === 'up' || !predict ? 'inline' : 'none',\r\n                            transform: startGame && (predict === 'down' || !predict) ? 'scale(0)' : 'scale(1)'\r\n                        }} className=\"up\">\r\n                            <div style={{display: predict === 'down' ? \"none\" : \"inherit\"}} className=\"profit\">\r\n                                                    <span style={{\r\n                                                        fontSize: '21px',\r\n                                                        display: widthMode === \"mobile\" ? \"inline\" : \"inline\"\r\n                                                    }}\r\n                                                          className={currentLang + \" green\"}>{LANG.Training.UsualState.MakeBet.yourProfit} </span>\r\n                                <span style={{fontSize: '21px'}}>\r\n                                                        {up || down ? ((bet / (bet + upBets) * downBets) * 0.97).toFixed(6) : 0}\r\n                                                    </span>\r\n                                <img style={{marginTop: '-5px'}} src={bitcoin} width=\"15\" height=\"21\" alt=\"b\"/>\r\n                                <div className='coinImg'>\r\n                                    <img src={CoinUpImg} alt='coin'/>\r\n                                </div>\r\n                            </div>\r\n                        </div>}\r\n                    {startGame && (predict === 'up' || !predict)\r\n                        ? <></>\r\n                        :\r\n                        <div style={{display: (predict === 'down' || !predict) ? 'block' : 'none'}}\r\n                             className=\"down\">\r\n                            <div style={{display: predict === 'up' ? \"none\" : \"inherit\"}} className=\"profit\">\r\n                                                    <span style={{\r\n                                                        fontSize: '21px',\r\n                                                        display: widthMode === \"mobile\" ? \"inline\" : \"inline\"\r\n                                                    }}\r\n                                                          className={currentLang + \" red\"}>{LANG.Training.UsualState.MakeBet.yourProfit} </span>\r\n                                <span\r\n                                    style={{fontSize: '21px'}}>{up || down ? ((bet / (bet + downBets) * upBets) * 0.97).toFixed(6) : 0}\r\n                                                </span>\r\n                                <img style={{marginTop: '-5px'}} src={bitcoin} width=\"15\" height=\"21\" alt=\"b\"/>\r\n                                <div className='coinImg'>\r\n                                    <img src={CoinDownImg} alt='coin'/>\r\n                                </div>\r\n                            </div>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className={`${widthMode} row bottom-container`}>\r\n                {widthMode === \"desktop\" ? <Rates/> : <></>}\r\n                <div style={{zIndex: step === 3 ? \"10\" : \"\"}} className={`${widthMode} round dashboard`}>\r\n                    <div className=\"range\">\r\n                        <div className=\"form-label d-flex justify-content-between\">\r\n                            <div className='makeYourBet'>\r\n                                <h2 className={predict || startGame ? \"text-left\" : \"make-bet text-left\"}>\r\n                                    {/* {widthMode === \"desktop\" ? LANG.BettingRealMoney.UsualState.MakeBet.title : \"\"}</h2> */}\r\n                                    {LANG.BettingRealMoney.UsualState.MakeBet.title}</h2>\r\n                                <p className='setSize'>Set bet size</p>\r\n                            </div>\r\n                            <div className=\"balanceInput\">\r\n                                {widthMode === \"mobile\" ? <Online/> : <></>}\r\n                                <span className='balanceBtn minus' onClick={() => setBetStep(false)}>-</span>\r\n                                <span\r\n                                    className={balance - bet >= 0 ? 'balanceInput__balance' : 'balanceInput__balance red'}>\r\n                                    <input id=\"numberBet\" type=\"number\" step=\"0.0001\" min=\"0.0001\" max=\"1\"\r\n                                           className={balance - bet >= 0 ? '' : 'red'}\r\n                                           disabled={predict || !timeBet}\r\n                                           onInput={setBetHandler}\r\n                                           value={bet}/>\r\n                                    <img className=\"numberBet\" width=\"15\" src={bitcoin} alt=\"up\"/>\r\n                                </span>\r\n                                <span className='balanceBtn plus' onClick={() => setBetStep(true)}>+</span>\r\n                            </div>\r\n                        </div>\r\n                        <form onSubmit={e => e.preventDefault()}>\r\n                            <div className=\"form\">\r\n                                <div className=\"bet\">\r\n                                    <input min=\"0.0001\" max=\"1\" step=\"0.0001\"\r\n                                           type=\"range\"\r\n                                           disabled={predict || !timeBet || startGame}\r\n                                           value={bet}\r\n                                           style={{backgroundImage: `linear-gradient(to right, ${balance - bet >= 0 ? '#32D74B' : '#FF453A'} 0%, ${balance - bet >= 0 ? '#32D74B' : '#FF453A'} ${bet * 100}%, #fff ${bet * 100}%, white 100%)`}}\r\n                                           onChange={setBetHandler}\r\n                                           className={balance - bet >= 0 ? 'green-range' : 'red-range'}\r\n                                           id=\"range\"/>\r\n                                </div>\r\n                                <div className='wrap-btn'>\r\n\r\n                                    {startGame && (predict === 'down' || !predict)\r\n                                        ? <span style={{display: startGame && !predict ? 'flex' : 'none'}}\r\n                                                className=\"off\">All bets are off</span>\r\n                                        : <div style={{\r\n                                            display: predict === 'up' || !predict ? 'block' : 'none',\r\n                                            transform: startGame && (predict === 'down' || !predict) ? 'scale(0)' : 'scale(1)'\r\n                                        }} className=\"up\">\r\n                                            <div className=\"profit\">\r\n                                                    <span style={{display: widthMode === \"mobile\" ? \"block\" : \"inline\"}}\r\n                                                          className={\" green\"}>{LANG.BettingRealMoney.UsualState.MakeBet.yourProfit}</span>\r\n                                                <span>\r\n                                                    {up || down ? ((bet / (bet + upBets) * downBets) * 0.97).toFixed(6) : 0}\r\n                                                </span>\r\n                                                <img src={bitcoin} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                            </div>\r\n                                            <button disabled={predict || balance - bet < 0 || !timeBet}\r\n                                                    onClick={(e) => {\r\n                                                        e.preventDefault();\r\n                                                        betDone(e);\r\n                                                    }}\r\n                                                    className={\" btn green predict-btn\"}>{LANG.BettingRealMoney.UsualState.MakeBet.btnUp}\r\n\r\n                                                <img src={arrowUp} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                                <Rect idButton={'up'} mode={timeBet ? 'rectUp' : \"\"}/>\r\n                                            </button>\r\n                                        </div>}\r\n\r\n                                    {startGame && (predict === 'up' || !predict)\r\n                                        ? <></>\r\n                                        :\r\n                                        <div style={{display: (predict === 'down' || !predict) ? 'block' : 'none'}}\r\n                                             className=\"down\">\r\n                                            <div className=\"profit\">\r\n                                                    <span style={{display: widthMode === \"mobile\" ? \"block\" : \"inline\"}}\r\n                                                          className={\" red\"}>{LANG.BettingRealMoney.UsualState.MakeBet.yourProfit}</span>\r\n                                                <span>\r\n                                                    {up || down ? ((bet / (bet + downBets) * upBets) * 0.97).toFixed(6) : 0}\r\n                                                </span>\r\n                                                <img src={bitcoin} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                            </div>\r\n                                            <button disabled={predict || balance - bet < 0 || !timeBet}\r\n                                                    onClick={(e) => {\r\n                                                        btnDownHandler(e)\r\n                                                    }}\r\n                                                    className={\" btn red predict-btn\"}\r\n                                                    id=\"down\">{LANG.BettingRealMoney.UsualState.MakeBet.btnDown}\r\n                                                <img src={arrowDown} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                                <Rect idButton={'down'} mode={timeBet ? 'rectDown' : \"\"}/>\r\n                                            </button>\r\n                                        </div>}\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        balance: state.balanceReducer.balance,\r\n        congratulation: state.balanceReducer.congratulation,\r\n        course: state.courseReducer.course,\r\n        currentCourse: state.courseReducer.currentCourse,\r\n        currentTime: state.courseReducer.currentTime,\r\n        lastSeconds: state.courseReducer.lastSeconds,\r\n        lastWin: state.balanceReducer.lastWin,\r\n        lastWinGame: state.balanceReducer.lastWinGame,\r\n        congratulation: state.balanceReducer.congratulation,\r\n        predict: state.balanceReducer.predict,\r\n        yourlose: state.balanceReducer.yourlose,\r\n        downBets: state.balanceReducer.downBets,\r\n        upBets: state.balanceReducer.upBets,\r\n        up: state.balanceReducer.up,\r\n        down: state.balanceReducer.down,\r\n        widthMode: state.switchOptions.widthMode,\r\n        currentLang: state.switchOptions.lang,\r\n        step: state.switchOptions.step,\r\n        play: state.soundReducer.play,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    betWin,\r\n    betLose,\r\n    predictUp,\r\n    predictDown,\r\n    predictClear,\r\n    click,\r\n    up_down,\r\n    you_lose,\r\n    bell,\r\n    stop,\r\n    playTimer,\r\n    playTimer2,\r\n    fireworks,\r\n    closeCongratulation,\r\n    muteToggle,\r\n    userdata,\r\n    stopBetTimer,\r\n    stopGameTimer,\r\n    playBetTimer,\r\n    playGameTimer,\r\n    closeYourLose,\r\n    closeCongratulation,\r\n    playYouWon\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\types.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\sound\\Sound.js",["326","327"],"import React, {useRef, useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {stop} from '../redux/actions/music';\r\n\r\nconst Sound = ({play, param, stop, mute}) => {\r\n    const audRef = useRef(null);\r\n    const handlePlay = () => {\r\n        audRef.current.play();\r\n    }\r\n    const muted = () => {\r\n        audRef.current.muted = !mute;\r\n    }\r\n    useEffect(() => {\r\n        if (param.id === play) {\r\n            audRef.current.id === 'fireworks' ? audRef.current.volume = 0.3 : audRef.current.volume = 0.7;\r\n            audRef.current.id === 'timer' ? audRef.current.playbackRate = 1.06 : audRef.current.playbackRate = 1.0;\r\n            handlePlay();\r\n        }\r\n        stop();\r\n    }, [param.id, play, handlePlay]);\r\n    useEffect(() => {\r\n        muted();\r\n    }, [muted]);\r\n    return (\r\n        <div className=\"sound\">\r\n            <audio ref={audRef} id={param.id} src={param.effect}/>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        play: state.soundReducer.play,\r\n        mute: state.soundReducer.mute\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    stop\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sound);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\game.js",["328"],"import {\r\n    BET_LOSE,\r\n    BET_WIN, CHANGE_DEMO,\r\n    CLEAR_BET,\r\n    CLOSE_CONGRATULATION, CLOSE_YOURLOSE,\r\n    GET_RATES,\r\n    GET_USER_DATA, GOAWAY,\r\n    SET_BET_DOWN,\r\n    SET_BET_UP\r\n} from \"../types\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    balance: 0,\r\n    lastWin: 0,\r\n    lastWinGame: 0,\r\n    lastgame: 0,\r\n    wins: 0,\r\n    '3wins': false,\r\n    btcWallet: '',\r\n    isDemo: undefined,\r\n    congratulation: false,\r\n    predict: '',\r\n    colorBlalance: 'white',\r\n    down: 0,\r\n    up: 0,\r\n    upBets: 0,\r\n    downBets: 0,\r\n    online: 0,\r\n    yourlose: false\r\n\r\n}\r\nexport const balanceReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case CHANGE_DEMO:\r\n            return {\r\n                ...state,\r\n                isDemo: !state.isDemo\r\n            };\r\n        case GET_USER_DATA:\r\n            if (action.payload.isDemo) {\r\n                return {\r\n                    ...state,\r\n                    '3wins': action.payload['3wins'],\r\n                    balance: action.payload.demoBalance,\r\n                    btcWallet: action.payload.btcWallet,\r\n                    wins: action.payload.wins,\r\n                    lastWin: action.payload.lastWin,\r\n                    lastWinGame: action.payload.lastWinGame,\r\n                    lastgame: action.payload.lastgame,\r\n                    name: action.payload.name,\r\n                    online: action.payload.online,\r\n                    isDemo: action.payload.isDemo\r\n                };\r\n\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    '3wins': action.payload['3wins'],\r\n                    balance: action.payload.balance,\r\n                    btcWallet: action.payload.btcWallet,\r\n                    wins: action.payload.wins,\r\n                    lastWin: action.payload.lastWin,\r\n                    lastWinGame: action.payload.lastWinGame,\r\n                    lastgame: action.payload.lastgame,\r\n                    name: action.payload.name,\r\n                    online: action.payload.online,\r\n                    isDemo: action.payload.isDemo\r\n                };\r\n            }\r\n        case GET_RATES:\r\n            if (state.isDemo) {\r\n                return {\r\n                    ...state,\r\n                    down: action.payload.demo.down.peoples,\r\n                    up: action.payload.demo.up.peoples,\r\n                    upBets: action.payload.demo.up.bitcoins,\r\n                    downBets: action.payload.demo.down.bitcoins,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    down: action.payload.real.down.peoples,\r\n                    up: action.payload.real.up.peoples,\r\n                    upBets: action.payload.real.up.bitcoins,\r\n                    downBets: action.payload.real.down.bitcoins,\r\n                }\r\n            }\r\n        case BET_WIN:\r\n            return {\r\n                ...state,\r\n                congratulation: true,\r\n                colorBlalance: 'green'\r\n            };\r\n        case BET_LOSE:\r\n            return {\r\n                ...state,\r\n                colorBlalance: 'red',\r\n                yourlose: true\r\n            };\r\n        case SET_BET_UP:\r\n            return {\r\n                ...state,\r\n                predict: 'up'\r\n            };\r\n        case SET_BET_DOWN:\r\n            return {\r\n                ...state,\r\n                predict: 'down'\r\n            };\r\n        case CLEAR_BET:\r\n            return {\r\n                ...state,\r\n                predict: ''\r\n            };\r\n        case CLOSE_CONGRATULATION:\r\n            return {...state, congratulation: false};\r\n        case CLOSE_YOURLOSE:\r\n            return {...state, yourlose: false};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\sound.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\entry.js",["329"],"import {\r\n    AUTHORIZATION, CREATE_AD, DEVICE_WIDTH, FIRST_IN,\r\n    GET_COURSE,\r\n    GET_LOCATION, GOAWAY, LANG_MODE, LOGOUT,\r\n    PROHIBITION,\r\n    REGISTRATION, SWITCH_STEP, TOUCHSTART, VIEW_MODE\r\n} from \"../types\";\r\n\r\nconst initialState = {\r\n    auth: false,\r\n    reg: false,\r\n    geoposition: '',\r\n    course: [],\r\n    currentCourse: 0,\r\n    currentTime: 0,\r\n    lastSeconds: undefined,\r\n    logoutQuestion: false,\r\n    createAd: false,\r\n    unauthorized: false,\r\n    widthMode: window.outerWidth > 756 ? \"desktop\" : \"mobile\",\r\n    view: false,\r\n    lang: \"en\",\r\n    step: 0,\r\n    firstIn: false,\r\n    touchstart: false\r\n}\r\n\r\nexport const switchOptions = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CREATE_AD:\r\n            return {...state, createAd: !state.createAd};\r\n        case DEVICE_WIDTH:\r\n            return {...state, widthMode: action.payload};\r\n        case VIEW_MODE:\r\n            return {...state, view: action.payload};\r\n        case LANG_MODE:\r\n            return {...state, lang: action.payload};\r\n        case SWITCH_STEP:\r\n            return {...state, step: action.payload};\r\n        case TOUCHSTART:\r\n            return {...state, touchstart: true};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case AUTHORIZATION:\r\n            if (sessionStorage.getItem('token') !== null) {\r\n                return {...state, auth: true, unauthorized: false};\r\n            } else {\r\n                return {...state, auth: false};\r\n            }\r\n        case GOAWAY:\r\n            return {\r\n                ...state,\r\n                unauthorized: true\r\n            };\r\n        case PROHIBITION:\r\n            return {...state, auth: false};\r\n        case REGISTRATION:\r\n            return {...state, reg: !state.reg}\r\n        case LOGOUT:\r\n            return {...state, logoutQuestion: !state.logoutQuestion}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const geoReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case GET_LOCATION:\r\n            return {...state, geoposition: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const courseReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_COURSE:\r\n            return {\r\n                ...state,\r\n                course: action.payload.bitcoins,\r\n                currentCourse: action.payload.bitcoins ? action.payload.bitcoins[action.payload.bitcoins.length - 1] : 0,\r\n                currentTime: action.payload.times ? action.payload.times[action.payload.times.length - 1] : 0,\r\n                lastSeconds: action.payload.lastSeconds\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\api\\Api.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Timer.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Presentation.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step1.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step3.js",["330"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport imgPerson from '../../images/person x5F 3 1.png'\r\nimport {switchStep} from '../../redux/actions/index';\r\nimport {switchView} from \"../../redux/actions\";\r\nimport {playClick} from '../../redux/actions/music';\r\nimport {connect} from 'react-redux';\r\nimport {EN} from '../../languages/en'\r\nimport {RU} from '../../languages/ru'\r\n\r\nconst Step3 = ({playClick, switchStep, currentLang, widthMode, switchView}) => {\r\n    const LANG = currentLang === 'en' ? EN : RU;\r\n    const isDesktop = widthMode === \"desktop\" ? true : false;\r\n    if (!isDesktop) {\r\n        switchView(false)\r\n    }\r\n    return (\r\n        <div className=\"step step3\">\r\n            <img className='step-img' src={imgPerson} alt='person'/>\r\n\r\n\r\n            <div className='step-content'>\r\n                <ul className='list-lines'>\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                </ul>\r\n                <h3 className='step-content__title'>{LANG.Intro.Step3.title}</h3>\r\n                <p className='step-content__content'>{LANG.Intro.Step3.content}</p>\r\n                <ul className=\"step-nav\">\r\n                    <li className='step-nav__item' onClick={() => {\r\n                        switchStep(2);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.prev}</span>\r\n                    </li>\r\n                    <li className='step-nav__item step-nav_btnSkip' onClick={() => {\r\n                        switchStep(0);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.skip}</span>\r\n                    </li>\r\n                    <li className='step-nav__item' onClick={() => {\r\n                        switchStep(4);\r\n                        playClick();\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.next}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentLang: state.switchOptions.lang,\r\n        widthMode: state.switchOptions.widthMode\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    switchStep,\r\n    playClick,\r\n    switchView\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Step3)","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step5.js",["331"],"import React from 'react'\r\nimport imgPerson from '../../images/person x5F 1 1.png'\r\nimport {switchStep} from '../../redux/actions/index';\r\nimport {switchView} from \"../../redux/actions\";\r\nimport {click, playClick} from '../../redux/actions/music';\r\nimport {connect} from 'react-redux';\r\nimport {EN} from '../../languages/en'\r\nimport {RU} from '../../languages/ru'\r\n\r\n\r\nconst Step5 = ({playClick, switchStep, currentLang, switchView, widthMode}) => {\r\n    const LANG = currentLang === 'en' ? EN : RU;\r\n    const isDesktop = widthMode === \"desktop\" ? true : false;\r\n    if (!isDesktop) {\r\n        switchView(true)\r\n    }\r\n\r\n    return (\r\n        <div className=\"step step5\">\r\n            <img className='step-img' src={imgPerson} alt='person'/>\r\n\r\n\r\n            <div className='step-content'>\r\n                <ul className='list-lines'>\r\n\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n\r\n                </ul>\r\n                <h3 className='step-content__title'>{LANG.Intro.Step5.title}</h3>\r\n                <p className='step-content__content'>{LANG.Intro.Step5.content}</p>\r\n                <ul className=\"step-nav\">\r\n\r\n                    <li className='step-nav__item' onClick={() => {\r\n                        switchStep(4);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.prev}</span>\r\n                    </li>\r\n                    <li className='step-nav__item step-nav_btnSkip' onClick={() => {\r\n                        switchStep(0);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.skip}</span>\r\n                    </li>\r\n                    <li className='step-nav__item' onClick={() => {\r\n                        switchStep(0);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.finish}</span>\r\n\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentLang: state.switchOptions.lang,\r\n        widthMode: state.switchOptions.widthMode\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    switchStep,\r\n    playClick,\r\n    switchView\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Step5)\r\n\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step4.js",["332","333","334"],"import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport imgPerson from '../../images/person x4F 4 1.png'\r\nimport imgClickOnWallet from '../../images/clickOnWallet.png'\r\nimport {switchStep} from '../../redux/actions/index';\r\nimport {switchView} from \"../../redux/actions\";\r\nimport {playClick} from '../../redux/actions/music';\r\nimport {connect} from 'react-redux';\r\nimport {EN} from '../../languages/en'\r\nimport {RU} from '../../languages/ru'\r\n\r\nconst Step4 = ({playClick, switchStep, currentLang, switchView, widthMode, view}) => {\r\n    const [clickOnWalllet, setClickOnWalllet] = useState(false)\r\n    const LANG = currentLang === 'en' ? EN : RU;\r\n    const isDesktop = widthMode === \"desktop\" ? true : false;\r\n    if (isDesktop === true || view === true) {\r\n        return (\r\n            <div className=\"step step4\">\r\n                <img className='step-img' src={imgPerson} alt='person'/>\r\n                <div className='step-content'>\r\n                    <ul className='list-lines'>\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                    </ul>\r\n                    <h3 className='step-content__title'>{LANG.Intro.Step4.title}</h3>\r\n                    <p className='step-content__content'>{LANG.Intro.Step4.content}</p>\r\n                    <ul className=\"step-nav\">\r\n                        <li className='step-nav__item' onClick={() => {\r\n                            switchView(false);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.prev}</span>\r\n                        </li>\r\n                        <li className='step-nav__item step-nav_btnSkip' onClick={() => {\r\n                            switchStep(0);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.skip}</span>\r\n                        </li>\r\n                        <li className='step-nav__item' onClick={() => {\r\n                            switchStep(5);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.next}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n                \r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"step step4 clickOnWallet\">\r\n                <img className='step-img' src={imgClickOnWallet} alt='person'/>\r\n                <div className='step-content'>\r\n                    <ul className='list-lines'>\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                    </ul>\r\n                    <h3 className='step-content__title'>{LANG.Intro.ClickOnWallet.title}</h3>\r\n                    <p className='step-content__content'>{LANG.Intro.ClickOnWallet.content}</p>\r\n                    <ul className=\"step-nav\">\r\n                        <li className='step-nav__item' onClick={() => {\r\n                            switchStep(3);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.prev}</span>\r\n                        </li>\r\n                        <li className='step-nav__item step-nav_btnSkip' onClick={() => {\r\n                            switchStep(0);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.skip}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentLang: state.switchOptions.lang,\r\n        widthMode: state.switchOptions.widthMode,\r\n        view: state.switchOptions.view\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    switchStep,\r\n    playClick,\r\n    switchView\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Step4)","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step2.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\ImagePreview.js",["335","336"],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\Tabs.js",["337","338"],"import React, { useState } from \"react\";\r\n// components\r\nimport { RangeInput } from \"./FormInput\";\r\n// styles\r\nimport \"./style.scss\";\r\n// images\r\nimport bitcoin from \"../../../../../images/bitcoin.svg\";\r\nimport dollar from \"../../../../../images/dollar.svg\";\r\n\r\nconst Tabs = ({ tabs }) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  return (\r\n    <div className=\"tabsContainer\">\r\n      <div className=\"tabs\">\r\n        {tabs.map(({ id, label }) => (\r\n          <div\r\n            key={id}\r\n            className={activeTab === id ? \"activeTab\" : \"tab\"}\r\n            onClick={() => setActiveTab(id)}\r\n          >\r\n            {label}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"daily\">\r\n        <span>Daily budget</span>\r\n        <span>Actual amount spend daily may vary</span>\r\n      </div>\r\n\r\n      <div className=\"estimated\">\r\n        <div className=\"estimated-perDay\">\r\n          <div style={{ textAlign: \"left\" }}>\r\n            Estimated 1K – 1,5K people <br />\r\n            reached per day\r\n          </div>\r\n\r\n          <div className=\"amount\">\r\n            <div className=\"amount-btc\">\r\n              0.0353 <img src={bitcoin} />\r\n            </div>\r\n\r\n            <div className=\"amount-dollar\">\r\n              <div className=\"dollarContainer\">1200</div>\r\n              <img src={dollar} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <RangeInput withError min={0} max={10000} balance={7500} />\r\n      </div>\r\n\r\n      <div className=\"content\">{tabs[activeTab]?.content}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tabs;\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\FormInput.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Audience\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Method\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Footer\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\useImagePreview.js",["339"],"import { useState } from \"react\";\r\n\r\nexport default () => {\r\n  const [image, setImage] = useState(null);\r\n\r\n  const setFile = ({ target }) => {\r\n    const localURL = URL.createObjectURL(target.files[0]);\r\n\r\n    setImage(localURL);\r\n  };\r\n\r\n  return [image, setFile];\r\n};\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\Duration.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Method\\Method.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Audience\\Audience.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Footer\\Footer.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Method\\components\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Method\\components\\RadioButtonBlock.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\privacy.en.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\privacy.ru.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\advertising.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\ListAds.js",["340","341","342","343","344"],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Wallet.js",["345","346"],{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","severity":1,"message":"352","line":63,"column":33,"nodeType":"353","messageId":"354","endLine":63,"endColumn":49},{"ruleId":"355","severity":1,"message":"356","line":68,"column":8,"nodeType":"357","endLine":68,"endColumn":27,"suggestions":"358"},{"ruleId":"359","severity":1,"message":"360","line":94,"column":25,"nodeType":"361","endLine":99,"endColumn":53},{"ruleId":"362","severity":1,"message":"363","line":12,"column":8,"nodeType":"364","messageId":"365","endLine":12,"endColumn":17},{"ruleId":"362","severity":1,"message":"366","line":13,"column":8,"nodeType":"364","messageId":"365","endLine":13,"endColumn":17},{"ruleId":"355","severity":1,"message":"367","line":56,"column":8,"nodeType":"357","endLine":56,"endColumn":23,"suggestions":"368"},{"ruleId":"362","severity":1,"message":"369","line":11,"column":8,"nodeType":"364","messageId":"365","endLine":11,"endColumn":20},{"ruleId":"355","severity":1,"message":"370","line":52,"column":39,"nodeType":"357","endLine":52,"endColumn":41,"suggestions":"371"},{"ruleId":"362","severity":1,"message":"372","line":54,"column":11,"nodeType":"364","messageId":"365","endLine":54,"endColumn":15},{"ruleId":"355","severity":1,"message":"373","line":8,"column":7,"nodeType":"357","endLine":8,"endColumn":9,"suggestions":"374"},{"ruleId":"362","severity":1,"message":"375","line":1,"column":27,"nodeType":"364","messageId":"365","endLine":1,"endColumn":35},{"ruleId":"355","severity":1,"message":"376","line":35,"column":8,"nodeType":"357","endLine":35,"endColumn":10,"suggestions":"377"},{"ruleId":"362","severity":1,"message":"378","line":2,"column":8,"nodeType":"364","messageId":"365","endLine":2,"endColumn":15},{"ruleId":"362","severity":1,"message":"379","line":16,"column":20,"nodeType":"364","messageId":"365","endLine":16,"endColumn":29},{"ruleId":"362","severity":1,"message":"380","line":6,"column":8,"nodeType":"364","messageId":"365","endLine":6,"endColumn":13},{"ruleId":"355","severity":1,"message":"381","line":84,"column":8,"nodeType":"357","endLine":84,"endColumn":21,"suggestions":"382"},{"ruleId":"355","severity":1,"message":"383","line":100,"column":8,"nodeType":"357","endLine":100,"endColumn":37,"suggestions":"384"},{"ruleId":"355","severity":1,"message":"385","line":110,"column":8,"nodeType":"357","endLine":110,"endColumn":18,"suggestions":"386"},{"ruleId":"355","severity":1,"message":"387","line":119,"column":8,"nodeType":"357","endLine":119,"endColumn":24,"suggestions":"388"},{"ruleId":"389","severity":1,"message":"390","line":199,"column":21,"nodeType":"361","endLine":199,"endColumn":79},{"ruleId":"389","severity":1,"message":"390","line":200,"column":21,"nodeType":"361","endLine":200,"endColumn":81},{"ruleId":"391","severity":1,"message":"392","line":383,"column":9,"nodeType":"393","messageId":"354","endLine":383,"endColumn":23},{"ruleId":"391","severity":1,"message":"394","line":418,"column":5,"nodeType":"393","messageId":"354","endLine":418,"endColumn":24},{"ruleId":"355","severity":1,"message":"395","line":10,"column":11,"nodeType":"396","endLine":12,"endColumn":6},{"ruleId":"355","severity":1,"message":"397","line":20,"column":8,"nodeType":"357","endLine":20,"endColumn":36,"suggestions":"398"},{"ruleId":"362","severity":1,"message":"399","line":7,"column":20,"nodeType":"364","messageId":"365","endLine":7,"endColumn":26},{"ruleId":"362","severity":1,"message":"400","line":2,"column":45,"nodeType":"364","messageId":"365","endLine":2,"endColumn":53},{"ruleId":"362","severity":1,"message":"401","line":2,"column":10,"nodeType":"364","messageId":"365","endLine":2,"endColumn":14},{"ruleId":"362","severity":1,"message":"402","line":5,"column":9,"nodeType":"364","messageId":"365","endLine":5,"endColumn":14},{"ruleId":"362","severity":1,"message":"401","line":2,"column":10,"nodeType":"364","messageId":"365","endLine":2,"endColumn":14},{"ruleId":"362","severity":1,"message":"403","line":13,"column":12,"nodeType":"364","messageId":"365","endLine":13,"endColumn":26},{"ruleId":"362","severity":1,"message":"404","line":13,"column":28,"nodeType":"364","messageId":"365","endLine":13,"endColumn":45},{"ruleId":"389","severity":1,"message":"390","line":32,"column":15,"nodeType":"361","endLine":32,"endColumn":60},{"ruleId":"405","severity":1,"message":"406","line":36,"column":64,"nodeType":"407","endLine":36,"endColumn":106},{"ruleId":"389","severity":1,"message":"390","line":40,"column":22,"nodeType":"361","endLine":40,"endColumn":43},{"ruleId":"389","severity":1,"message":"390","line":45,"column":15,"nodeType":"361","endLine":45,"endColumn":35},{"ruleId":"408","severity":1,"message":"409","line":3,"column":1,"nodeType":"410","endLine":13,"endColumn":3},{"ruleId":"362","severity":1,"message":"411","line":4,"column":8,"nodeType":"364","messageId":"365","endLine":4,"endColumn":15},{"ruleId":"362","severity":1,"message":"401","line":5,"column":22,"nodeType":"364","messageId":"365","endLine":5,"endColumn":26},{"ruleId":"362","severity":1,"message":"412","line":17,"column":12,"nodeType":"364","messageId":"365","endLine":17,"endColumn":19},{"ruleId":"362","severity":1,"message":"413","line":18,"column":12,"nodeType":"364","messageId":"365","endLine":18,"endColumn":18},{"ruleId":"414","severity":1,"message":"415","line":55,"column":52,"nodeType":"416","messageId":"354","endLine":55,"endColumn":54},{"ruleId":"362","severity":1,"message":"417","line":3,"column":9,"nodeType":"364","messageId":"365","endLine":3,"endColumn":13},{"ruleId":"362","severity":1,"message":"418","line":32,"column":7,"nodeType":"364","messageId":"365","endLine":32,"endColumn":25},"no-native-reassign",["419"],"no-negated-in-lhs",["420"],"no-control-regex","Unexpected control character(s) in regular expression: \\x00.","Literal","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'prohibition'. Either include it or remove the dependency array. If 'prohibition' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["421"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Preloader' is defined but never used.","Identifier","unusedVar","'bitsybets' is defined but never used.","React Hook useEffect has missing dependencies: 'bet', 'course', 'lastSeconds', and 'startWin'. Either include them or remove the dependency array. If 'startWin' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["422"],"'JS_FIREWORKS' is defined but never used.","React Hook useEffect has a missing dependency: 'switchView'. Either include it or remove the dependency array. If 'switchView' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["423"],"'LANG' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'geoposition'. Either include it or remove the dependency array. If 'geoposition' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["424"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'rates'. Either include it or remove the dependency array. If 'rates' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["425"],"'bitcoin' is defined but never used.","'setBanner' is assigned a value but never used.","'store' is defined but never used.","React Hook useEffect has missing dependencies: 'gameStart', 'predictSubmit', and 'startGame'. Either include them or remove the dependency array.",["426"],"React Hook useEffect has missing dependencies: 'playBetTimer', 'playGameTimer', 'playTimer', 'playTimer2', 'stopBetTimer', and 'stopGameTimer'. Either include them or remove the dependency array. If 'stopBetTimer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["427"],"React Hook useEffect has missing dependencies: 'closeYourLose' and 'you_lose'. Either include them or remove the dependency array. If 'you_lose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["428"],"React Hook useEffect has missing dependencies: 'closeCongratulation' and 'playYouWon'. Either include them or remove the dependency array. If 'playYouWon' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["429"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-dupe-keys","Duplicate key 'congratulation'.","ObjectExpression","Duplicate key 'closeCongratulation'.","The 'muted' function makes the dependencies of useEffect Hook (at line 23) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'muted' in its own useCallback() Hook.","VariableDeclarator","React Hook useEffect has a missing dependency: 'stop'. Either include it or remove the dependency array. If 'stop' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["430"],"'GOAWAY' is defined but never used.","'FIRST_IN' is defined but never used.","'Link' is defined but never used.","'click' is defined but never used.","'clickOnWalllet' is assigned a value but never used.","'setClickOnWalllet' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'deposit' is defined but never used.","'arrList' is assigned a value but never used.","'isData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'User' is defined but never used.","'mapDispatchToProps' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},"Update the dependencies array to be: [location.pathname, prohibition]",{"range":"451","text":"452"},"Update the dependencies array to be: [bet, course, currentCourse, lastSeconds, startWin]",{"range":"453","text":"454"},"Update the dependencies array to be: [switchView]",{"range":"455","text":"456"},"Update the dependencies array to be: [geoposition]",{"range":"457","text":"458"},"Update the dependencies array to be: [rates]",{"range":"459","text":"460"},"Update the dependencies array to be: [gameStart, lastSeconds, predictSubmit, startGame]",{"range":"461","text":"462"},"Update the dependencies array to be: [startGame, timeBet, predict, stopBetTimer, playGameTimer, playTimer, stopGameTimer, playBetTimer, playTimer2]",{"range":"463","text":"464"},"Update the dependencies array to be: [closeYourLose, you_lose, yourlose]",{"range":"465","text":"466"},"Update the dependencies array to be: [closeCongratulation, congratulation, playYouWon]",{"range":"467","text":"468"},"Update the dependencies array to be: [param.id, play, handlePlay, stop]",{"range":"469","text":"470"},[2373,2392],"[location.pathname, prohibition]",[2194,2209],"[bet, course, currentCourse, lastSeconds, startWin]",[2076,2078],"[switchView]",[233,235],"[geoposition]",[1688,1690],"[rates]",[2887,2900],"[gameStart, lastSeconds, predictSubmit, startGame]",[3279,3308],"[startGame, timeBet, predict, stopBetTimer, playGameTimer, playTimer, stopGameTimer, playBetTimer, playTimer2]",[3503,3513],"[closeYourLose, you_lose, yourlose]",[3720,3736],"[closeCongratulation, congratulation, playYouWon]",[705,733],"[param.id, play, handlePlay, stop]"]