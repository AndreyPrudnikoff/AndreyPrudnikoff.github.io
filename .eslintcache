[{"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\index.js":"1","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\App.js":"2","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\reportWebVitals.js":"3","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\store.js":"4","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\gotodesktop.js":"5","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\restore.js":"6","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Support.js":"7","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Reset.js":"8","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Btc.js":"9","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Auth.js":"10","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Refill.js":"11","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Header\\Header.js":"12","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\CompletePay.js":"13","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Start\\Start.js":"14","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Usd.js":"15","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Invite.js":"16","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Withdraw.js":"17","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\CompleteWith.js":"18","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\Ads.js":"19","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\sound\\Playlist.js":"20","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Main.js":"21","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\index.js":"22","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\index.js":"23","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\music.js":"24","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Preloader.js":"25","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Graph.js":"26","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Time.js":"27","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Rect\\Rect.js":"28","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\game.js":"29","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\api\\User.js":"30","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\ru.js":"31","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\en.js":"32","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Online.js":"33","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Rates.js":"34","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\RightSector.js":"35","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\fireworks.js":"36","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Dashboard.js":"37","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\types.js":"38","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\sound\\Sound.js":"39","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\game.js":"40","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\sound.js":"41","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\entry.js":"42","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\api\\Api.js":"43","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Timer.js":"44","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Presentation.js":"45","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step1.js":"46","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step3.js":"47","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step5.js":"48","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step4.js":"49","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step2.js":"50","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\index.js":"51","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\index.js":"52","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\ImagePreview.js":"53","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\Tabs.js":"54","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\FormInput.js":"55","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\index.js":"56","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Audience\\index.js":"57","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Footer\\index.js":"58","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\useImagePreview.js":"59","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\Duration.js":"60","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Audience\\Audience.js":"61","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Footer\\Footer.js":"62","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\privacy.en.js":"63","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\privacy.ru.js":"64","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\advertising.js":"65","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\ListAds.js":"66","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Wallet.js":"67","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\country\\country.js":"68","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\country\\timezone.js":"69","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\advertising.js":"70","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\MyAd.js":"71"},{"size":591,"mtime":1614091503470,"results":"72","hashOfConfig":"73"},{"size":5400,"mtime":1614863906533,"results":"74","hashOfConfig":"73"},{"size":375,"mtime":1614091503473,"results":"75","hashOfConfig":"73"},{"size":213,"mtime":1614091503473,"results":"76","hashOfConfig":"73"},{"size":703,"mtime":1614077203770,"results":"77","hashOfConfig":"73"},{"size":3887,"mtime":1614675032845,"results":"78","hashOfConfig":"73"},{"size":1878,"mtime":1614853034024,"results":"79","hashOfConfig":"73"},{"size":4643,"mtime":1614267107952,"results":"80","hashOfConfig":"73"},{"size":7009,"mtime":1614788106671,"results":"81","hashOfConfig":"73"},{"size":15884,"mtime":1614869800167,"results":"82","hashOfConfig":"73"},{"size":5161,"mtime":1614949957708,"results":"83","hashOfConfig":"73"},{"size":14452,"mtime":1614961964419,"results":"84","hashOfConfig":"73"},{"size":1440,"mtime":1614266243057,"results":"85","hashOfConfig":"73"},{"size":8880,"mtime":1614610450774,"results":"86","hashOfConfig":"73"},{"size":4384,"mtime":1614266025599,"results":"87","hashOfConfig":"73"},{"size":3532,"mtime":1614265690058,"results":"88","hashOfConfig":"73"},{"size":3638,"mtime":1614266122072,"results":"89","hashOfConfig":"73"},{"size":1581,"mtime":1614266391240,"results":"90","hashOfConfig":"73"},{"size":3405,"mtime":1614963119481,"results":"91","hashOfConfig":"73"},{"size":2345,"mtime":1614949957714,"results":"92","hashOfConfig":"73"},{"size":4972,"mtime":1614942328836,"results":"93","hashOfConfig":"73"},{"size":2285,"mtime":1614942328838,"results":"94","hashOfConfig":"73"},{"size":427,"mtime":1614702894606,"results":"95","hashOfConfig":"73"},{"size":1805,"mtime":1614684182451,"results":"96","hashOfConfig":"73"},{"size":964,"mtime":1614091503410,"results":"97","hashOfConfig":"73"},{"size":10579,"mtime":1614675032846,"results":"98","hashOfConfig":"73"},{"size":973,"mtime":1614610450750,"results":"99","hashOfConfig":"73"},{"size":232,"mtime":1614091503410,"results":"100","hashOfConfig":"73"},{"size":2184,"mtime":1614091503471,"results":"101","hashOfConfig":"73"},{"size":1918,"mtime":1614869800163,"results":"102","hashOfConfig":"73"},{"size":13931,"mtime":1614869800170,"results":"103","hashOfConfig":"73"},{"size":11211,"mtime":1614788106678,"results":"104","hashOfConfig":"73"},{"size":2659,"mtime":1614251434317,"results":"105","hashOfConfig":"73"},{"size":4076,"mtime":1614610450749,"results":"106","hashOfConfig":"73"},{"size":8231,"mtime":1614942328837,"results":"107","hashOfConfig":"73"},{"size":9768,"mtime":1614091503416,"results":"108","hashOfConfig":"73"},{"size":19181,"mtime":1614788106671,"results":"109","hashOfConfig":"73"},{"size":2714,"mtime":1614955452729,"results":"110","hashOfConfig":"73"},{"size":1266,"mtime":1614610450805,"results":"111","hashOfConfig":"73"},{"size":3806,"mtime":1614610450804,"results":"112","hashOfConfig":"73"},{"size":2223,"mtime":1614684241351,"results":"113","hashOfConfig":"73"},{"size":2846,"mtime":1614610450804,"results":"114","hashOfConfig":"73"},{"size":342,"mtime":1614949957703,"results":"115","hashOfConfig":"73"},{"size":1720,"mtime":1614269502354,"results":"116","hashOfConfig":"73"},{"size":904,"mtime":1614593700515,"results":"117","hashOfConfig":"73"},{"size":3956,"mtime":1614675032886,"results":"118","hashOfConfig":"73"},{"size":2590,"mtime":1614603167841,"results":"119","hashOfConfig":"73"},{"size":2562,"mtime":1614603093381,"results":"120","hashOfConfig":"73"},{"size":4450,"mtime":1614609551000,"results":"121","hashOfConfig":"73"},{"size":2539,"mtime":1614603217675,"results":"122","hashOfConfig":"73"},{"size":208,"mtime":1614788106669,"results":"123","hashOfConfig":"73"},{"size":73,"mtime":1614789260782,"results":"124","hashOfConfig":"73"},{"size":2024,"mtime":1614947387685,"results":"125","hashOfConfig":"73"},{"size":3016,"mtime":1614961964418,"results":"126","hashOfConfig":"73"},{"size":4842,"mtime":1614955146515,"results":"127","hashOfConfig":"73"},{"size":39,"mtime":1614330813166,"results":"128","hashOfConfig":"73"},{"size":39,"mtime":1614330813163,"results":"129","hashOfConfig":"73"},{"size":37,"mtime":1614330813168,"results":"130","hashOfConfig":"73"},{"size":272,"mtime":1614330813184,"results":"131","hashOfConfig":"73"},{"size":3265,"mtime":1614961919578,"results":"132","hashOfConfig":"73"},{"size":3617,"mtime":1614961964417,"results":"133","hashOfConfig":"73"},{"size":682,"mtime":1614963307566,"results":"134","hashOfConfig":"73"},{"size":4742,"mtime":1614610450801,"results":"135","hashOfConfig":"73"},{"size":4742,"mtime":1614610450802,"results":"136","hashOfConfig":"73"},{"size":2459,"mtime":1614955446950,"results":"137","hashOfConfig":"73"},{"size":3264,"mtime":1614962019806,"results":"138","hashOfConfig":"73"},{"size":1439,"mtime":1614942328835,"results":"139","hashOfConfig":"73"},{"size":6396,"mtime":1614788106677,"results":"140","hashOfConfig":"73"},{"size":310,"mtime":1614869800169,"results":"141","hashOfConfig":"73"},{"size":2318,"mtime":1614955644899,"results":"142","hashOfConfig":"73"},{"size":5724,"mtime":1614962631543,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s56myd",{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311"},"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\App.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\reportWebVitals.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\store.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\gotodesktop.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\restore.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Support.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Reset.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Btc.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Auth\\Auth.js",["312","313"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\nimport PhoneInput from 'react-phone-number-input';\r\nimport './auth.scss';\r\nimport arrow_btn from \"../../images/arrow-btn.png\";\r\nimport {authorization, betWin, registration, switchStep} from \"../../redux/actions\";\r\nimport {User} from \"../../api/User\";\r\nimport {fireworks, muteToggle, playClick} from \"../../redux/actions/music\";\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\n\r\nconst Auth = ({\r\n                  reg,\r\n                  authorization,\r\n                  registration,\r\n                  muteToggle,\r\n                  mute,\r\n                  betWin,\r\n                  fireworks,\r\n                  history,\r\n                  widthMode,\r\n                  currentLang,\r\n                  playClick,\r\n                  switchStep\r\n              }) => {\r\n    const [password, setPassword] = useState(true)\r\n    const [passwordConfirm, setPasswordConfirm] = useState(true)\r\n    const [name, setName] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [pass, setPass] = useState('')\r\n    const [confpass, setConfpass] = useState('')\r\n    const [promocode, setPromocode] = useState('')\r\n    const [code, setCode] = useState('')\r\n    const [enterCode, setEnterCode] = useState(false)\r\n    const [err, setErr] = useState('')\r\n    const [privacy, setPrivacy] = useState(false)\r\n    const [country, setCountry] = useState(\"US\")\r\n\r\n    const LANG = currentLang === \"en\" ? EN : RU\r\n\r\n    const phoneRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        fetch('https://extreme-ip-lookup.com/json/')\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                setCountry(response.countryCode);\r\n            })\r\n            .catch((data, status) => {\r\n                console.log('Request failed:', data);\r\n            });\r\n    }, [])\r\n    const moveCaretToEnd = () => {\r\n        if (phoneRef.createTextRange) {\r\n            const r = phoneRef.createTextRange();\r\n            r.collapse(false);\r\n            r.select();\r\n        }\r\n    }\r\n    const clearData = () => {\r\n        setName('');\r\n        setPhone('');\r\n        setEmail('');\r\n        setPass('');\r\n        setConfpass('');\r\n        setErr('');\r\n        setCode('');\r\n        setEnterCode(false);\r\n    }\r\n    const setPhoneNumber = (value) => {\r\n        setPhone(value);\r\n    }\r\n\r\n    const checkForLatin = event => {\r\n        let val = event.replace(/[^\\x00-\\x7F]/ig, '');\r\n        setName(val);\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        const body = JSON.stringify({name, phone, email, pass, confpass, promocode});\r\n        if (confpass.length < 8 || confpass.length < 8) {\r\n            setErr('Password length must be 8 characters')\r\n        } else {\r\n            User.register(body)\r\n                .then(data => {\r\n                    if (data.data.status === \"success\") {\r\n                        setEnterCode(true);\r\n                    } else {\r\n                        if (data.data.error) {\r\n                            setErr(data.data.data);\r\n                        } else return false;\r\n                    }\r\n                })\r\n                .catch(error => setErr(error.response.data.data))\r\n        }\r\n    }\r\n    const codeSubmit = (e) => {\r\n        e.preventDefault();\r\n        User.code({code: code})\r\n            .then(res => {\r\n                if (res.data.status === \"success\") {\r\n                    sessionStorage.setItem('token', res.data.data.accessToken);\r\n                    authorization();\r\n                    if(res.data.newUser) {\r\n                        console.log(res.data.newUser)\r\n                        switchStep(1);\r\n                    }\r\n                } else {\r\n                    if (res.data.error) {\r\n                        setErr(res.data.error);\r\n                    } else return false;\r\n                }\r\n            })\r\n            .catch(error => setErr(error.response.data.error))\r\n    }\r\n\r\n    const handleLogin = event => {\r\n        event.preventDefault();\r\n        const body = JSON.stringify({phone, pass});\r\n\r\n        User.login(body)\r\n            .then(res => res)\r\n            .then(data => {\r\n                    if (data.data.status === \"success\") {\r\n                        sessionStorage.setItem('token', data.data.data.accessToken);\r\n                        history.push('/game');\r\n                        if (!mute) {\r\n                            muteToggle()\r\n                        }\r\n                        return authorization();\r\n                    } else if (data.data.error) {\r\n                        return setErr(data.data.error);\r\n                    } else {\r\n                        return setErr('error, try again later')\r\n                    }\r\n                }\r\n            )\r\n            .catch(error => setErr(error.response.data.error));\r\n\r\n    }\r\n    if (reg) {\r\n\r\n        if (enterCode) {\r\n            return (\r\n                <div className=\"round-dark auth\">\r\n                         <span onClick={() => {\r\n                             setEnterCode(false);\r\n                             clearData();\r\n                             playClick()\r\n                         }} className=\"back\">&larr;</span>\r\n                    <h2>Enter code</h2>\r\n                    <form onSubmit={e => codeSubmit(e)}>\r\n                        <div className=\"\">\r\n                            <input value={code} onInput={e => setCode(e.target.value)} id=\"code\" name=\"code\" type=\"text\"\r\n                                   required/>\r\n                        </div>\r\n                        <span style={{display: err ? 'block' : 'none'}} className=\"error red\">{err}</span>\r\n                        <button type=\"submit\" onClick={playClick}>SEND</button>\r\n                    </form>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                privacy\r\n                    ? <div style={{display: privacy ? \"block\" : \"none\"}} className=\"round-dark auth privacy-block\">\r\n                        <span onClick={() => {\r\n                            playClick();\r\n                            setPrivacy(false);\r\n                        }} className=\"back\">\r\n                        &larr;\r\n                        </span>\r\n                        <p>\r\n                            <h2>{LANG.Auth.Register.privacy}</h2>\r\n                            {LANG.Auth.Register.text}\r\n                        </p>\r\n                    </div>\r\n                    : <div className=\"round-dark auth\">\r\n\r\n                    <span onClick={() => {\r\n                        registration();\r\n                        clearData();\r\n                        playClick()\r\n                    }} className=\"back\">&larr;</span>\r\n                        <h2 className={currentLang}>{LANG.Auth.Register.title}</h2>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"\">\r\n                                <label className={currentLang} htmlFor=\"name\">{LANG.Auth.Register.nameTitle}</label>\r\n                                <input onChange={e => {\r\n                                    checkForLatin(e.target.value);\r\n                                    // setName(e.target.value);\r\n                                    setErr('');\r\n                                }} value={name}\r\n                                       placeholder={LANG.Auth.Register.name}\r\n                                       id=\"name\" name=\"name\" type=\"text\" required/>\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <label className={currentLang} htmlFor=\"phone\">{LANG.Auth.Register.phoneTitle}</label>\r\n                                <PhoneInput onChange={e => {\r\n                                    setErr('');\r\n                                    setPhoneNumber(e);\r\n                                    moveCaretToEnd();\r\n                                }} id=\"phone\" ref={phoneRef} limitMaxLength={true} placeholder={LANG.Auth.Register.phone}\r\n                                            value={phone} international\r\n                                            defaultCountry={country}\r\n                                            displayInitialValueAsLocalNumber required/>\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <label className={currentLang} htmlFor=\"email\">{LANG.Auth.Register.emailTitle}</label>\r\n                                <input onChange={e => {\r\n                                    setEmail(e.target.value);\r\n                                    setErr('');\r\n                                }}\r\n                                       value={email}\r\n                                       placeholder={LANG.Auth.Register.email}\r\n                                       id=\"email\" name=\"email\" type=\"email\" required/>\r\n                            </div>\r\n                            <div className={password ? 'pass' : 'text'}>\r\n                            <span onClick={() => {\r\n                                setPassword(!password);\r\n                                playClick()\r\n                            }} className=\"eye\"/>\r\n                                <label className={currentLang} htmlFor=\"password\">{LANG.Auth.Register.password}</label>\r\n                                <input min='8' onChange={e => {\r\n                                    setPass(e.target.value);\r\n                                    setErr('');\r\n                                }}\r\n                                       value={pass}\r\n                                       id=\"password\" name=\"password\" type={password ? 'password' : 'text'} required/>\r\n                            </div>\r\n                            <div className={passwordConfirm ? 'pass' : 'text'}>\r\n                            <span onClick={() => {\r\n                                setPasswordConfirm(!passwordConfirm);\r\n                                playClick()\r\n                            }} className=\"eye\"/>\r\n                                <label className={currentLang}\r\n                                       htmlFor=\"passwordConfirm\">{LANG.Auth.Register.passwordRepeat}</label>\r\n                                <input min='8' onChange={e => {\r\n                                    setConfpass(e.target.value);\r\n                                    setErr('');\r\n                                }}\r\n                                       value={confpass}\r\n                                       id=\"passwordConfirm\" name=\"passwordConfirm\"\r\n                                       type={passwordConfirm ? 'password' : 'text'}\r\n                                       required/>\r\n                            </div>\r\n                            <span style={{display: err ? 'block' : 'none'}} className=\"error red\">{err}</span>\r\n\r\n                            <div className='text'>\r\n                                <label className={currentLang}\r\n                                       htmlFor=\"promo\">{LANG.Auth.Register.promo}</label>\r\n\r\n                                <input onChange={(e) => {\r\n                                    setPromocode(e.target.value);\r\n                                    setErr('');\r\n                                }} value={promocode} id=\"promo\" name=\"promo\" type=\"text\"/>\r\n                            </div>\r\n\r\n                            <div className=\"privacy\">\r\n                                <label>\r\n                                    <input type=\"checkbox\" id=\"privacy\" required/>\r\n                                    <span>{LANG.Auth.Register.begin}</span>\r\n\r\n\r\n                                </label>\r\n                                <label className=\"privacy-row\">\r\n                                    <input type=\"checkbox\" id=\"privacy\" required/>\r\n                                    <span onClick={() => setPrivacy(true)}\r\n                                          className=\"gold link\">{LANG.Auth.Register.legal}  <span className=\"and\">{LANG.Auth.Register.and} </span>\r\n                                           {LANG.Auth.Register.privacy}</span>\r\n                                </label>\r\n                            </div>\r\n\r\n                            <button className={currentLang} onClick={playClick}>{LANG.Auth.Register.signUp}</button>\r\n\r\n\r\n                            <Link to='/support' className={currentLang + \" support-link\"}\r\n                                  onClick={playClick}>{LANG.support}</Link>\r\n                        </form>\r\n\r\n                    </div>\r\n            );\r\n        }\r\n    } else {\r\n        return (\r\n            <div className=\"round-dark auth\">\r\n               <span onClick={() => {\r\n                   clearData();\r\n                   playClick()\r\n               }} className=\"back\"><Link to=\"/\">&larr;</Link></span>\r\n                <h2 className={currentLang}>{LANG.Auth.Login.title}</h2>\r\n                <form onSubmit={handleLogin}>\r\n                    <div className=\"\">\r\n                        <label className={currentLang} htmlFor=\"phone\">{LANG.Auth.Login.phoneTitle}</label>\r\n                        <PhoneInput onChange={e => {\r\n                            setPhone(e);\r\n                            setErr('');\r\n                        }} id=\"phone\" limitMaxLength={true} placeholder={LANG.Auth.Login.phone} value={phone}\r\n                                    international\r\n                                    defaultCountry={country}\r\n                                    displayInitialValueAsLocalNumber required/>\r\n                    </div>\r\n                    <div className={password ? 'pass' : 'text'}>\r\n                        <span onClick={() => {\r\n                            setPassword(!password);\r\n                            playClick()\r\n                        }} className=\"eye\"/>\r\n                        <label className={currentLang} htmlFor=\"password\">{LANG.Auth.Login.password}</label>\r\n                        <input onInput={e => {\r\n                            setPass(e.target.value);\r\n                            setErr('');\r\n                        }} id=\"password\" name=\"password\"\r\n                               type={password ? 'password' : 'text'} required/>\r\n                    </div>\r\n                    <span style={{display: err ? 'block' : 'none'}} className=\"error red\">{err}</span>\r\n                    <Link to=\"/restore\" className={currentLang + \" forgot mb-3\"}\r\n                          onClick={playClick}>{LANG.Auth.Login.forgotPassword}</Link>\r\n                    <button className={currentLang} onClick={playClick}>{LANG.Auth.Login.loginIn}</button>\r\n                    <span className={currentLang}>{LANG.Auth.Login.or}</span>\r\n                    <button className={currentLang} onClick={e => {\r\n                        e.preventDefault();\r\n                        registration();\r\n                        clearData();\r\n                        playClick();\r\n                    }}>{LANG.Auth.Login.signUp}\r\n                    </button>\r\n                    <Link to=\"/support\" className={currentLang + \" support-link\"}\r\n                          onClick={playClick}>{LANG.support}</Link>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        reg: state.authReducer.reg,\r\n        mute: state.soundReducer.mute,\r\n        widthMode: state.switchOptions.widthMode,\r\n        currentLang: state.switchOptions.lang\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    authorization,\r\n    registration,\r\n    muteToggle,\r\n    betWin,\r\n    fireworks,\r\n    playClick,\r\n    switchStep\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Refill.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Header\\Header.js",["314","315","316"],"import React, {useState, useEffect} from 'react';\r\nimport './header.scss';\r\nimport logo from '../../images/logoLeft.svg';\r\nimport burger from '../../images/burger.png';\r\nimport refreshIcon from '../../images/refresh.svg';\r\nimport sound from '../../images/volume-up-solid.svg';\r\nimport noSound from '../../images/volume-mute-solid.svg';\r\nimport signup from '../../images/user_plus.svg';\r\nimport login from '../../images/sign_in.svg';\r\nimport caret from '../../images/lang.svg';\r\nimport russian from '../../images/russian.png';\r\nimport british from '../../images/british.png';\r\nimport bets from '../../images/bets.png';\r\nimport wallet from '../../images/wallet.png';\r\nimport {connect} from \"react-redux\";\r\nimport {playClick} from \"../../redux/actions/music\";\r\nimport {\r\n    authorization,\r\n    chooseLang,\r\n    createAdProp,\r\n    logoutQuestion,\r\n    prohibition,\r\n    registration,\r\n    switchStep,\r\n    switchView\r\n} from \"../../redux/actions\";\r\nimport {setIsPreview, setPreviewBanner} from '../../redux/actions/advertising'\r\nimport {changeDemo} from '../../redux/actions/game'\r\nimport {Link, useLocation, useHistory} from \"react-router-dom\";\r\nimport {muteToggle} from \"../../redux/actions/music\";\r\nimport closePreview from '../../images/closePreview.png';\r\n\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\n\r\n\r\nconst Header = ({switchStep, auth, reg, mute, muteToggle, logoutQuestion, createAdProp, logout, registration, prohibition, authorization, unauthorized, predict, refresh, view, switchView, widthMode, currentLang, chooseLang, playClick, step, changeDemo, isPreview, setIsPreview, setPreviewBanner}) => {\r\n\r\n    const [menu, setMenu] = useState(false);\r\n    const [showLang, setShowLang] = useState(true);\r\n    const LANG = currentLang === \"en\" ? EN : RU;\r\n    const switchLang = () => setShowLang(!showLang);\r\n    useEffect(() => {\r\n        authorization();\r\n    })\r\n    const handleMute = () => {\r\n        muteToggle();\r\n    }\r\n    let location = useLocation();\r\n    let history = useHistory();\r\n    let isGame = location.pathname === \"/game\";\r\n    const chooseLanguages = () => {\r\n        if (currentLang === \"en\") {\r\n            chooseLang(\"ru\")\r\n        } else {\r\n            chooseLang(\"en\")\r\n        }\r\n        switchLang();\r\n    }\r\n    const stepTest = (switchBool) => {\r\n        if (step === 4 || step === 0) {\r\n            switchView(switchBool);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (location.pathname === \"/\" || location.pathname === \"/login\") {\r\n            prohibition();\r\n\r\n        }\r\n    }, [location.pathname])\r\n    return (\r\n        <div>\r\n            <header className=\"header\" style={{background: isPreview ? 'rgba(0,0,0,0)' : '#1a1f34'}}>\r\n                {isPreview ? (\r\n                    <div className='blur block-click'>\r\n                        <div className={isPreview ? 'closePreview' : 'closePreviewNone'}>\r\n                            <span></span>\r\n                            <span>Ad preview</span>\r\n                            <img src={closePreview} onClick={() => {setPreviewBanner(true);setIsPreview(false); history.push('/ads')}}/>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                : (\r\n                <React.Fragment>\r\n                    <div style={{display: logout ? \"block\" : \"none\"}} className=\"blur\">\r\n                        <div className=\"round-dark win\">\r\n                            <h2 className={currentLang}>{LANG.ModalWindows.LogOut.title}</h2>\r\n                            <div className=\"win-btn\">\r\n                                <button onClick={() => {\r\n                                    logoutQuestion();\r\n                                    sessionStorage.removeItem('token');\r\n                                    prohibition();\r\n                                    window.location.reload();\r\n                                    playClick()\r\n                                }} className=\"btn btn-primary\"><Link to=\"/\">{LANG.ModalWindows.LogOut.btnLogOut}</Link>\r\n                                </button>\r\n                                <button onClick={() => {\r\n                                    logoutQuestion();\r\n                                    playClick()\r\n                                }} className={currentLang + \" btn btn-primary\"}>{LANG.ModalWindows.LogOut.btnContunue}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"wrap-header\">\r\n                            <nav className=\"navbar\">\r\n                                <a onClick={() => {\r\n                                    sessionStorage.setItem(\"saveReload\", \"0\");\r\n                                    sessionStorage.removeItem('token');\r\n                                    window.location.reload();\r\n                                    playClick()\r\n                                }} className=\"navbar-brand\">\r\n                                    <img src={logo} alt=\"logo\" height=\"23\"/>\r\n                                </a>\r\n                            </nav>\r\n                            <div className=\"header-right\">\r\n                                <div className=\"flag-wrapper\">\r\n                                    <img onClick={() => {\r\n                                        switchLang();\r\n                                        playClick()\r\n                                    }} className=\"flag\"\r\n                                        src={currentLang === \"en\" ? british : russian} width=\"30\" alt=\"lang\"/>\r\n                                    <img onClick={() => {\r\n                                        chooseLanguages();\r\n                                        playClick()\r\n                                    }} style={{display: showLang ? \"none\" : \"inline\"}}\r\n                                        className=\"flag hide-flag\" src={currentLang === \"ru\" ? british : russian} width=\"30\"\r\n                                        alt=\"lang\"/>\r\n                                    <img style={{transform: showLang ? \"none\" : \"rotate(180deg)\"}} onClick={() => {\r\n                                        switchLang();\r\n                                        playClick()\r\n                                    }}\r\n                                        className=\"sound \"\r\n                                        src={caret}\r\n                                        height=\"18\" width=\"18\"\r\n                                        alt=\"lang\"/>\r\n                                </div>\r\n\r\n                                <img onClick={() => {\r\n                                    if (sessionStorage.getItem(\"token\")) {\r\n                                        sessionStorage.setItem(\"saveReload\", \"1\");\r\n                                    }\r\n                                    window.location.reload();\r\n                                    playClick()\r\n                                }} style={{marginRight: \"20px\"}} className=\"sound reload\" height=\"18\" width=\"18\"\r\n                                    src={refreshIcon}\r\n                                    alt=\"refresh\"/>\r\n                                <img onClick={() => {\r\n                                    handleMute();\r\n                                    playClick()\r\n                                }} className=\"sound \" src={mute ? sound : noSound} height=\"18\" width=\"18\"\r\n                                    alt=\"sound\"/>\r\n\r\n                                    {!auth ? <div className=\"startHeader\">\r\n                                        <Link onClick={() => {\r\n                                            if (reg) {\r\n                                                registration();\r\n                                            }\r\n                                            playClick()\r\n                                        }} className={currentLang + \" login auth-header\"}\r\n                                            to=\"/login\">{LANG.Auth.Login.loginIn}</Link>\r\n                                        <Link onClick={() => {\r\n                                            playClick()\r\n                                            if (reg) {\r\n                                                registration();\r\n                                            }\r\n                                        }} className=\"login auth-header-icon\" to=\"/login\">\r\n                                            <img width={18} src={login} alt=\"signin\"/>\r\n                                        </Link>\r\n                                        <Link onClick={() => {registration(); playClick()}} className={currentLang + \" signup auth-header\"}\r\n                                            to=\"/signup\">{LANG.Auth.Login.signUp}</Link>\r\n                                        <Link onClick={() => {registration(); playClick()}} className=\"signup auth-header-icon\" to=\"/signup\">\r\n                                            <img width={18} src={signup} alt=\"signup\"/></Link>\r\n                                    <Link onClick={(e) => {\r\n                                        playClick()\r\n                                        if (reg) {\r\n                                            registration();\r\n                                        }\r\n                                    }} className=\"login auth-header-icon\" to=\"/login\">\r\n                                        <img width={18} src={login} alt=\"signin\"/>\r\n                                    </Link>\r\n                                    <Link onClick={() => {\r\n                                        registration();\r\n                                        playClick()\r\n                                    }} className=\"signup auth-header-icon\" to=\"/signup\">\r\n                                        <img width={18} src={signup} alt=\"signup\"/></Link>\r\n                                </div> : null}\r\n                                <div onClick={(e) => {\r\n                                    playClick()\r\n                                    setMenu(!menu)\r\n                                }}\r\n                                    style={{\r\n                                        display: auth ? 'flex' : 'none',\r\n                                        pointerEvents: predict ? \"none\" : \"auto\"\r\n                                    }}\r\n                                    className=\"menu\">\r\n                                    <img className=\"burger\"\r\n                                        src={burger} alt=\"icon\"/>\r\n                                    <ul style={{display: menu ? 'block' : 'none'}} className=\"burger-menu\">\r\n                                        {widthMode !== 'desktop' ? null :\r\n                                            <>\r\n                                                <li onClick={() => {\r\n                                                    history.push(\"/ads\");\r\n                                                    setPreviewBanner(false)\r\n                                                    playClick()\r\n                                                }} className=\"burger-menu-item bord\">{LANG.Menu.first}</li>\r\n                                                <li onClick={() => {\r\n                                                    history.push(\"/myads\");\r\n                                                    playClick()\r\n                                                }} className=\"burger-menu-item bord\"><span>{LANG.Menu.second}</span></li>\r\n                                            </>\r\n\r\n                                        }\r\n\r\n                                        <li onClick={() => {\r\n                                            history.push(\"/game\");\r\n                                            changeDemo();\r\n                                            switchStep(1);\r\n                                        }} className=\"burger-menu-item bord\">\r\n                                            <span>{LANG.Menu.third}</span></li>\r\n                                        <li className=\"burger-menu-item\" onClick={() => {\r\n                                            playClick();\r\n                                            logoutQuestion();\r\n                                        }}>{LANG.Menu.exit}\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n\r\n                        </div>\r\n                        <div style={{display: isGame && widthMode !== \"desktop\" ? \"block\" : \"none\"}} className=\"tabs\">\r\n                            <div className=\"wrap-tabs\">\r\n                                <div onClick={() => {\r\n                                    stepTest(false);\r\n                                    playClick()\r\n                                }} className={view ? \"tab bets\" : \"tab bets active\"}>\r\n                                    <img src={bets} alt=\"tab\"/>\r\n                                </div>\r\n                                <div onClick={() => {\r\n                                    stepTest(true);\r\n                                    playClick()\r\n                                }} className={!view ? \"tab mobile_wallet\" : \"tab mobile_wallet active\"}>\r\n                                    <img src={wallet} alt=\"tab\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>)}\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        auth: state.authReducer.auth,\r\n        reg: state.authReducer.reg,\r\n        mute: state.soundReducer.mute,\r\n        logout: state.authReducer.logoutQuestion,\r\n        unauthorized: state.authReducer.unauthorized,\r\n        predict: state.balanceReducer.predict,\r\n        isDemo: state.balanceReducer.isDemo,\r\n        widthMode: state.switchOptions.widthMode,\r\n        view: state.switchOptions.view,\r\n        currentLang: state.switchOptions.lang,\r\n        step: state.switchOptions.step,\r\n        isPreview: state.adsOptions.isPreview\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    muteToggle,\r\n    logoutQuestion,\r\n    createAdProp,\r\n    registration,\r\n    prohibition,\r\n    authorization,\r\n    switchView,\r\n    chooseLang,\r\n    playClick,\r\n    switchStep,\r\n    changeDemo,\r\n    setIsPreview,\r\n    setPreviewBanner\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\CompletePay.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Start\\Start.js",["317","318"],"import React, {useState, useEffect} from 'react';\r\nimport './start.scss';\r\nimport Graph from \"../Graph\";\r\nimport Time from \"../Main/Time\";\r\nimport bitcoin from \"../../images/bitcoin.svg\";\r\nimport {connect} from \"react-redux\";\r\nimport arrowDown from \"../../images/arrowDown.svg\";\r\nimport arrowUp from \"../../images/arrowUp.svg\";\r\nimport bull from \"../../images/bull_start.png\";\r\nimport bear from \"../../images/bear_start.png\";\r\nimport Rect from \"../Main/Rect/Rect\";\r\nimport coin from \"../../images/coin.svg\";\r\nimport {userdata} from \"../../redux/actions/game\";\r\nimport {registration} from \"../../redux/actions\";\r\nimport {playClick, up_down, startWin, muteToggle} from \"../../redux/actions/music\";\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\n\r\nconst Start = ({\r\n                   currentCourse,\r\n                   course,\r\n                   history,\r\n                   lastSeconds,\r\n                   userdata,\r\n                   widthMode,\r\n                   registration,\r\n                   currentLang,\r\n                   playClick,\r\n                   up_down,\r\n                   startWin,\r\n                   muteToggle,\r\n                   mute\r\n               }) => {\r\n    const [timeGame, setTimeGame] = useState(false);\r\n    const [start, setStart] = useState(false);\r\n    const [bet, setBet] = useState('');\r\n    const [predict, setPredict] = useState('');\r\n\r\n    const LANG = currentLang === \"en\" ? EN : RU\r\n\r\n    useEffect(() => {\r\n        if (lastSeconds % 10 === 0 && start) {\r\n            setTimeGame(true);\r\n        }\r\n    }, [lastSeconds])\r\n    useEffect(() => {\r\n        if (lastSeconds % 10 === 0 && start) {\r\n            if (bet === 'down' && currentCourse < course[course.length - 2]) {\r\n                setPredict('win');\r\n                setBet('');\r\n                startWin()\r\n            } else if (bet === 'down' && currentCourse > course[course.length - 2]) {\r\n                setPredict('lose');\r\n                setBet('');\r\n                startWin()\r\n            } else if (bet === 'up' && currentCourse > course[course.length - 2]) {\r\n                setPredict('win');\r\n                setBet('');\r\n                startWin()\r\n            } else if (bet === 'up' && currentCourse < course[course.length - 2]) {\r\n                setPredict('lose');\r\n                setBet('');\r\n                startWin()\r\n            } else {\r\n                setBet('');\r\n            }\r\n        }\r\n\r\n    }, [currentCourse])\r\n    return (\r\n        <div className=\"start\">\r\n            <div style={{display: predict ? \"block\" : \"none\"}} className=\"blur soon\">\r\n                <div className=\"round-dark win\">\r\n                    <div className=\"win-btn\">\r\n                       <span onClick={() => {\r\n                           setPredict('');\r\n                           setBet('');\r\n                           playClick()\r\n                       }} className=\"chross\">&#10008;</span>\r\n                        <h2 className={currentLang}>{LANG.Main.Modal.title.first}\r\n                            <br/> {currentLang === \"en\" ? LANG.Main.Modal.title.second : null}</h2>\r\n                        {/* <h2>{currentLang === \"en\" ? LANG.Main.Modal.title.first <br/> LANG.Main.Modal.title.second : LANG.Main.Modal.title.first}</h2> */}\r\n                        {/* <h2>You did great! <br/> Join now!</h2> */}\r\n                        <button onClick={() => {\r\n                            setPredict('');\r\n                            setBet('');\r\n                            history.push('/login');\r\n                            playClick()\r\n                        }} className={currentLang + \" btn btn-primary\"}>\r\n                            {LANG.Main.Modal.logIn}\r\n                        </button>\r\n                        <button onClick={() => {\r\n                            setPredict('');\r\n                            setBet('');\r\n                            history.push('/signup');\r\n                            registration();\r\n                            playClick()\r\n                        }} className={currentLang + \" btn btn-primary\"}>\r\n                            {LANG.Main.Modal.signUp}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`${widthMode}-start round round-dark`}>\r\n                <div className=\"bull-start-mobile\"><img src={bull} width=\"\" alt=\"bull\"/></div>\r\n                <div className=\"bear-start-mobile\"><img src={bear} width=\"\" alt=\"bear\"/></div>\r\n                <div className=\"bull-start\"><img src={bull} alt=\"bull\"/></div>\r\n                <div className=\"bear-start\"><img src={bear} alt=\"bear\"/></div>\r\n                <div className=\"text text-center\">\r\n                    <h2>\r\n                        <span className=\"gold\">BITCY</span>BETS\r\n                    </h2>\r\n                    <p className={currentLang + \" mt-3\"}>{LANG.Main.Start.content}</p>\r\n                </div>\r\n                <div className=\"dark\">\r\n                    <Time/>\r\n                    <div className=\"course\">\r\n                        <h2 style={{opacity: !currentCourse ? 0 : 1}} className=\"text-center\"><img src={bitcoin}\r\n                                                                                                   alt=\"course\"/>\r\n                            {currentCourse} <span>$</span>\r\n                        </h2>\r\n                        <div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{display: !currentCourse ? \"none\" : \"block\"}} className=\"graph\">\r\n                        <Graph gradient1={20} gradient2={150} chartHeight={widthMode === \"desktop\" ? 200 : 150}/>\r\n                    </div>\r\n                    <div style={{display: currentCourse ? \"none\" : \"block\"}} className=\"load\">\r\n                        <div className=\"wrap-img-preload\">\r\n                            <img className=\"coin1\" src={coin} alt=\"\"/>\r\n                            <img className=\"coin2\" src={coin} alt=\"\"/>\r\n                            <img className=\"coin3\" src={coin} alt=\"\"/>\r\n                            <img className=\"coin4\" src={coin} alt=\"\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"buttons\">\r\n                        <div className=\"wrap-btn\">\r\n                            <button disabled={bet || !currentCourse} onClick={() => {\r\n                                setBet('down');\r\n                                if (!mute) {\r\n                                    muteToggle()\r\n                                }\r\n                                up_down();\r\n                                setStart(true)\r\n                            }}\r\n                                    className={currentLang + \" btn green green-start predict-btn\"}\r\n                                    id=\"down\">\r\n                                <span className={currentLang + \" green\"}>{LANG.Main.Start.btnUp}</span>\r\n                                <img src={arrowUp} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                <Rect start={timeGame} infinite={'infinity'} idButton={'down'}\r\n                                      mode={start ? 'rectUp' : ''}/>\r\n                            </button>\r\n                            <button disabled={bet || !currentCourse} onClick={() => {\r\n                                setBet('up');\r\n                                if (!mute) {\r\n                                    muteToggle()\r\n                                }\r\n                                up_down();\r\n                                setStart(true)\r\n                            }}\r\n                                    className={currentLang + \" btn red red-start predict-btn\"}\r\n                                    id=\"down\">\r\n                                <span className={currentLang + \" red\"}>{LANG.Main.Start.btnDown}</span>\r\n                                <img src={arrowDown} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                <Rect infinite={'infinity'} idButton={'down'} mode={start ? 'rectDown' : ''}/>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"bg\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentCourse: state.courseReducer.currentCourse,\r\n        course: state.courseReducer.course,\r\n        lastSeconds: state.courseReducer.lastSeconds,\r\n        widthMode: state.switchOptions.widthMode,\r\n        currentLang: state.switchOptions.lang,\r\n        mute: state.soundReducer.mute\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    userdata,\r\n    registration,\r\n    playClick,\r\n    up_down,\r\n    startWin,\r\n    muteToggle\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Start);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Usd.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Invite.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\Withdraw.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Refill\\CompleteWith.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\Ads.js",["319"],"import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n// styles\r\nimport \"./ads.scss\";\r\n// components\r\nimport {TextInput} from \"./components/Duration/components\";\r\nimport {Duration, ImagePreview, Audience, Footer} from \"./components\";\r\nimport Wallet from \"./components/Wallet\"\r\nimport {getCurrentList, setWebsite} from \"../../redux/actions/advertising\";\r\nimport {User} from \"../../api/User\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {createAdProp} from \"../../redux/actions\";\r\nimport {playClick} from \"../../redux/actions/music\";\r\nimport {userdata} from \"../../redux/actions/game\";\r\n\r\n\r\nconst Ads = (props) => {\r\n    let timezones = {};\r\n    let history =  useHistory();\r\n    props.country_codes_timezones.forEach(item => {\r\n        const k = Object.keys(item)[0];\r\n        timezones[k] = item[k];\r\n    })\r\n    const ad = {\r\n        banner: props.banner,\r\n        website_url: props.website_url,\r\n        country_codes_timezones: timezones,\r\n        banner_start_date: props.banner_start_date,\r\n        banner_start_time: props.banner_start_time,\r\n        banner_end_date: props.banner_end_date,\r\n        banner_end_time: props.banner_end_time,\r\n        budget: props.budget\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        User.createAd(ad)\r\n            .then((res=> {if(res.data.status === \"success\") {\r\n                props.createAdProp();\r\n                props.userdata();\r\n                props.getCurrentList();\r\n            }}))\r\n            .catch(e => console.log(e.data));\r\n    }\r\n\r\n    return (\r\n        <div style={{position: 'relative', display: 'flex'}}>\r\n            <div style={{display: props.createAd ? \"block\" : \"none\"}} className=\"blur soon\">\r\n                <div className=\"round-dark win\">\r\n                    <div className=\"win-btn\">\r\n                        <h2>Your ad completed</h2>\r\n                        <button onClick={() => {\r\n                            props.createAdProp();\r\n                            props.history.push(\"/myads\");\r\n                            props.playClick();\r\n                        }} className=\"btn btn-primary\">My ads\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <form onSubmit={(e) => handleSubmit(e)} className=\"round-dark ads\">\r\n                <ImagePreview/>\r\n\r\n                <TextInput onChange={props.setWebsite} label=\"Website URL\"/>\r\n\r\n                <hr/>\r\n\r\n                <Audience/>\r\n\r\n                <Duration/>\r\n\r\n                <Footer />\r\n            </form>\r\n            <Wallet input={true}/>\r\n        </div>\r\n    )\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n\r\n    return {\r\n        banner: state.adsOptions.banner,\r\n        website_url: state.adsOptions.website_url,\r\n        country_codes_timezones: state.adsOptions.country_codes_timezones,\r\n        banner_start_date: state.adsOptions.banner_start_date,\r\n        banner_start_time: state.adsOptions.banner_start_time,\r\n        banner_end_date: state.adsOptions.banner_end_date,\r\n        banner_end_time: state.adsOptions.banner_end_time,\r\n        budget: state.adsOptions.budget,\r\n        createAd: state.switchOptions.createAd\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    setWebsite,\r\n    createAdProp,\r\n    playClick,\r\n    userdata,\r\n    getCurrentList\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Ads);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\sound\\Playlist.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Main.js",["320","321","322","323"],"import React, { useEffect } from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport './main.scss';\r\nimport bitcoin from '../../images/bitcoin.svg';\r\nimport Graph from \"../Graph\";\r\nimport RightSector from \"./RightSector\";\r\nimport Dashboard from \"./Dashboard\";\r\n// import SelectList from \"./SelectList\";\r\nimport {\r\n    closeCongratulation,\r\n    closeYourLose,\r\n    createAdProp,\r\n    logoutQuestion,\r\n    prohibition,\r\n    switchView\r\n} from \"../../redux/actions\";\r\nimport {money, stop, you_lose, add_to_wallet, playClick} from \"../../redux/actions/music\";\r\nimport JS_FIREWORKS from \"../fireworks\";\r\nimport Time from \"./Time\";\r\nimport Preloader from \"./Preloader\";\r\nimport {userdata} from \"../../redux/actions/game\";\r\nimport Rates from \"./Rates\";\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\nimport Online from \"./Online\";\r\nimport Presentation from \"../Intro/Presentation\";\r\nimport closePreview from '../../images/closePreview.png';\r\n\r\nconst Main = ({history, step, view, switchView, course, lastWin, closeCongratulation, congratulation, yourlose, closeYourLose, currentCourse, money, muteToggle, logout, logoutQuestion, prohibition, userdata, lastWinGame, createAd, createAdProp, widthMode, currentLang, you_lose, add_to_wallet, playClick, isPreview}) => {\r\n\r\n    useEffect(() => {\r\n        userdata();\r\n    }, [congratulation, userdata]);\r\n    useEffect(()=> switchView(false), []);\r\n\r\n    const LANG = currentLang === \"en\" ? EN : RU;\r\n    let flag = course ? course.length : false;\r\n    return (\r\n        <div className={`${widthMode}-bg main`}>\r\n            <Preloader show={flag}/>\r\n            <div style={{display: createAd ? \"block\" : \"none\"}} className=\"blur soon\">\r\n                <div className=\"round-dark win\">\r\n                    <div className=\"win-btn\">\r\n                        <h2>This feature coming soon</h2>\r\n                        <button onClick={() => {\r\n                            createAdProp();\r\n                            playClick()\r\n                        }} className=\"btn btn-primary\">OK\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <main style={{display: flag ? 'block' : 'none'}}>\r\n                <div className=\"row main\">\r\n                    <Presentation />\r\n                    <div style={{display: widthMode === \"mobile\" && view ? \"none\" : \"flex\"}} className=\"left-sector\">\r\n                        {widthMode === \"mobile\" ? <Rates/> : <></>}\r\n                        <div style={{zIndex: step === 1 ?  \"10\" : \"\" } } className={`${widthMode} round globe`}>\r\n                            {widthMode === \"desktop\" ? <Time/> : <></>}\r\n                            <div>\r\n                                <h2 className=\"text-center\"><img src={bitcoin} className=\"m-2\" alt=\"course\"/>\r\n                                    {currentCourse} <span>$</span>\r\n                                </h2>\r\n                                <div>\r\n                                    {widthMode === \"desktop\" ? <Online/> : <></>}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"graph-wrapper\">\r\n                                <div className=\"graph\">\r\n                                    <Graph gradient1={widthMode === \"desktop\" ? undefined : 20}\r\n                                           gradient2={widthMode === \"desktop\" ? undefined : 150}\r\n                                           chartHeight={widthMode === \"desktop\" ? 250 : 150}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <Dashboard/>\r\n                    </div>\r\n                    {widthMode === \"desktop\" ? <RightSector/> : <></>}\r\n                    {widthMode === \"mobile\" && view ? <RightSector/> : <></>}\r\n\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        course: state.courseReducer.course,\r\n        currentCourse: state.courseReducer.currentCourse,\r\n        lastWin: state.balanceReducer.lastWin,\r\n        lastWinGame: state.balanceReducer.lastWinGame,\r\n        congratulation: state.balanceReducer.congratulation,\r\n        yourlose: state.balanceReducer.yourlose,\r\n        logout: state.authReducer.logoutQuestion,\r\n        createAd: state.switchOptions.createAd,\r\n        widthMode: state.switchOptions.widthMode,\r\n        view: state.switchOptions.view,\r\n        currentLang: state.switchOptions.lang,\r\n        step: state.switchOptions.step,\r\n        isPreview: state.adsOptions.isPreview\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    closeCongratulation,\r\n    closeYourLose,\r\n    money,\r\n    stop,\r\n    logoutQuestion,\r\n    prohibition,\r\n    userdata,\r\n    createAdProp,\r\n    you_lose,\r\n    add_to_wallet,\r\n    playClick,\r\n    switchView\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\index.js",["324"],"import {\r\n    AUTHORIZATION,\r\n    BET_LOSE,\r\n    BET_WIN,\r\n    CLOSE_CONGRATULATION, CLOSE_YOURLOSE, CREATE_AD, DEVICE_WIDTH, FIRST_IN,\r\n    GET_COURSE, GET_CURRENT_COURSE,\r\n    GET_LOCATION, LANG_MODE, LOGOUT,\r\n    PROHIBITION,\r\n    REGISTRATION, SWITCH_STEP, TOUCHSTART, VIEW_MODE\r\n} from \"../types\";\r\n\r\nimport {userdata} from \"./game\";\r\n\r\nexport function authorization() {\r\n    return {type: AUTHORIZATION}\r\n\r\n}\r\n\r\nexport function prohibition() {\r\n    return {type: PROHIBITION}\r\n}\r\n\r\nexport function registration() {\r\n    return {type: REGISTRATION}\r\n}\r\n\r\nexport function resizeScreen(width) {\r\n    return {type: DEVICE_WIDTH, payload: width}\r\n}\r\n\r\nexport function logoutQuestion() {\r\n    return {type: LOGOUT}\r\n}\r\n\r\nexport function geoposition() {\r\n    let namePlace = '';\r\n    return dispatch => {\r\n        navigator.geolocation.getCurrentPosition(async pos => {\r\n            let locationPlace = pos.coords.latitude + \",\" + pos.coords.longitude;\r\n            const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=abd620940ef44119b1f161639201704&q=${locationPlace}`);\r\n            const data = await response.json();\r\n            namePlace = data.location.tz_id\r\n            dispatch({type: GET_LOCATION, payload: namePlace})\r\n        })\r\n    }\r\n}\r\n\r\nexport function bitcoinCourse(data) {\r\n    return {\r\n        type: GET_COURSE, payload: data\r\n    }\r\n}\r\n\r\nexport function bitcoinCurrentCourse() {\r\n    return {type: GET_CURRENT_COURSE}\r\n}\r\n\r\nexport function betWin(data) {\r\n    return async dispatch => {\r\n        await dispatch(userdata);\r\n        return dispatch({type: BET_WIN, payload: data});\r\n    }\r\n}\r\n\r\nexport function betLose(data) {\r\n    return {type: BET_LOSE, payload: data}\r\n}\r\n\r\nexport function closeCongratulation() {\r\n    return {type: CLOSE_CONGRATULATION}\r\n}\r\n\r\nexport function closeYourLose() {\r\n    return {type: CLOSE_YOURLOSE}\r\n}\r\n\r\nexport function createAdProp() {\r\n    return {type: CREATE_AD}\r\n}\r\n\r\nexport function switchView(param) {\r\n    return {type: VIEW_MODE, payload: param}\r\n}\r\n\r\nexport function chooseLang(lang) {\r\n    return {type: LANG_MODE, payload: lang}\r\n}\r\n\r\nexport function switchStep(number) {\r\n    return {type: SWITCH_STEP, payload: number}\r\n}\r\n\r\nexport function touchstart() {\r\n    return {type: TOUCHSTART}\r\n}\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\music.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Preloader.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Graph.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Time.js",["325"],"import React, {useEffect, useState} from 'react';\r\nimport {geoposition} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Time = ({geo, geoposition}) => {\r\n    useEffect(() => {\r\n        geoposition()\r\n    },[geo]);\r\n    useEffect(() => {\r\n        const clock = setInterval(() => setTime(new Date().toLocaleTimeString()), 1000);\r\n        return () => clearInterval(clock);\r\n    }, [])\r\n    let [time, setTime] = useState(new Date().toLocaleTimeString());\r\n    return (\r\n        <div className=\"time\">\r\n            <h2 className=\"time-text\">{time.slice(0, 5)}</h2>\r\n            <div className=\"label text-center\">{geo || <span style={{fontSize: \"10px\"}}>Please, allow location access</span>}</div>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        geo: state.geoReducer.geoposition,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    geoposition\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Time);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Rect\\Rect.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\game.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\api\\User.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\ru.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\en.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Online.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Rates.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\RightSector.js",["326","327","328","329"],"import React, {useEffect, useState} from 'react';\r\nimport bitcoin from \"../../images/bitcoin.svg\";\r\nimport deposit from '../../images/deposit.svg';\r\nimport withdraw from '../../images/withdraw.svg';\r\nimport {connect} from \"react-redux\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {setIsPreview} from '../../redux/actions/advertising'\r\nimport {playClick, transition} from \"../../redux/actions/music\";\r\nimport switchWallet from \"../../images/switch_wallet.svg\";\r\nimport {changeDemo, userdata} from \"../../redux/actions/game\";\r\nimport {createAdProp} from \"../../redux/actions\";\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\nimport bannerImg from '../../images/adbanner3.png';\r\n\r\n\r\nconst RightSector = ({step, balance, lastWinGame, lastgame, wins, colorBlalance, userdata, name, isDemo, threewins, changeDemo, createAdProp, predict, currentLang, playClick, transition, setIsPreview, bannerPreview, isPreview}) => {\r\n\r\n    const [switcher, setSwitcher] = useState(false);\r\n    const [banner, setBanner] = useState(\"banner one round-dark\");\r\n    const LANG = currentLang === \"en\" ? EN : RU;\r\n    const balanceColor = {color: colorBlalance === 'green' ? '#32D74B' : colorBlalance === 'red' ? '#FF453A' : '#FFFFFF'}\r\n\r\n    // useEffect(() => {\r\n    //     const addBanner = setInterval(() => {\r\n    //         if(banner === \"banner one round-dark\") {\r\n    //             setBanner(\"banner three round-dark\");\r\n    //         // } else if (banner === \"banner two round-dark\") {\r\n    //         //     setBanner(\"banner three round-dark\");\r\n    //         } else if(banner === \"banner three round-dark\") {\r\n    //             setBanner(\"banner one round-dark\");\r\n    //         }\r\n    //     }, 30000)\r\n    //     return () => clearInterval(addBanner)\r\n    // }, [banner])\r\n    useEffect(() => {\r\n        userdata();\r\n    }, [userdata])\r\n\r\n    const isPreviewHandler = () => {\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"right-sector\">\r\n            <div style={{display: switcher ? \"block\" : \"none\"}} className=\"blur\">\r\n                <div className=\"round-dark win\">\r\n                    <h2 className=\"curremtLang\">{LANG.Training.UsualState.SwitchingToReal.title}</h2>\r\n                    {/*<div className=\"text-center\">You are going to play on real <br/> money. Are you sure? </div>*/}\r\n                    <div className=\"win-btn\">\r\n                        <button onClick={() => {\r\n                            transition();\r\n                            changeDemo();\r\n                            setSwitcher(false);\r\n                        }}\r\n                                className={currentLang + \" btn btn-primary\"}>{isDemo ? LANG.Training.UsualState.SwitchingToReal.btnSwitchToReal : LANG.Training.UsualState.SwitchingToDemo.btnSwitchToDemo}\r\n                        </button>\r\n                        <button onClick={() => {\r\n                            transition();\r\n                            userdata();\r\n                            setSwitcher(false);\r\n                        }} className={currentLang + \" btn btn-primary\"}>{!isDemo ? LANG.Training.UsualState.SwitchingToDemo.btnContinueReal : LANG.Training.UsualState.SwitchingToReal.btnContinueDemo}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{zIndex: step === 4 || step === 5 ? \"10\" : \"\"}} className=\"score-wrap round-dark\">\r\n                <h2 className=\"currentLang\">{isDemo ? LANG.Training.UsualState.DemoWallet.title : LANG.BettingRealMoney.UsualState.MyWallet.title}\r\n                    <span onClick={() => {\r\n                        if(!predict) {\r\n                            setSwitcher(true)\r\n                        }\r\n                        playClick()\r\n                    }} className={isDemo ? \"switch-wrapper demo\" : \"switch-wrapper real\"}\r\n                    style={predict ? {filter: 'grayscale(1)', opacity: .5} : null}>\r\n                    <img src={switchWallet} alt=\"\"/>\r\n                </span></h2>\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td width='50%'>\r\n                            <div className={currentLang + \" label\"}>{LANG.BettingRealMoney.UsualState.MyWallet.nameTitle}</div>\r\n                            <div className=\"score\" id=\"name\">{name}</div>\r\n                        </td>\r\n                        <td>\r\n                            <div className={currentLang + \" label\"}>{LANG.BettingRealMoney.UsualState.MyWallet.lastWinTitle}</div>\r\n                            <div className=\"score\" id=\"lastWin\">{lastWinGame || '0.000'} BTC</div>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td> \r\n                            <div className={currentLang + \" label\"}>{LANG.BettingRealMoney.UsualState.MyWallet.balanceTitle}</div>\r\n                            <div style={balanceColor} className=\"score score-balance\" id=\"balance\">{balance} &#8383;</div>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                    \r\n               \r\n                {!isDemo\r\n                    ? <div>\r\n                    <Link to=\"/refill\" style={{pointerEvents: predict ? \"none\" : \"auto\"}} className={currentLang + \" btn money-btn green\"} onClick={playClick}>{LANG.BettingRealMoney.UsualState.MyWallet.btnDeposit}\r\n                    <img src={deposit} alt=\"deposit\"/>\r\n                    </Link>\r\n                    <Link to=\"/withdraw\" style={{pointerEvents: predict ? \"none\" : \"auto\"}} className={currentLang + \" btn money-btn red\"} onClick={playClick}>{LANG.BettingRealMoney.UsualState.MyWallet.btnWithdraw}\r\n                    <img src={withdraw} alt=\"withdraw\"/>\r\n                    </Link>\r\n                    </div>\r\n                    : <div>\r\n                        <button disabled={predict} onClick={() => {setSwitcher(true); playClick()}}  className={currentLang + \" btn money-btn green\"}>{LANG.Training.UsualState.DemoWallet.btnBetBitcoin}\r\n                            {/*<img src={withdraw} alt=\"withdraw\"/>*/}\r\n                        </button>\r\n                        <Link to=\"/invite\" style={{pointerEvents: predict ? \"none\" : \"auto\"}} className={currentLang + \" btn money-btn friends\"} onClick={(e)=>{\r\n                            e.preventDefault();\r\n                            createAdProp();\r\n                            playClick();\r\n                        }}>{LANG.Training.UsualState.DemoWallet.btnPlayWithFriends}\r\n                            {/*<img src={deposit} alt=\"deposit\"/>*/}\r\n                        </Link>\r\n\r\n                    </div>}\r\n            </div>\r\n            <div onClick={() => {\r\n                window.open('https://bitrxapp.com/?gb', '_blank')\r\n            }} className={\"banner three round-dark\"}>\r\n                <img src={isPreview ? bannerPreview : bannerImg} className='bannerImg'/>\r\n                <button style={{display: banner === \"banner one round-dark\" ? \"none\" : \"block\"}} className=\"btn learn-more\" onClick={playClick}>Learn more</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        balance: state.balanceReducer.balance,\r\n        lastWinGame: state.balanceReducer.lastWinGame,\r\n        lastgame: state.balanceReducer.lastgame,\r\n        colorBlalance: state.balanceReducer.colorBlalance,\r\n        wins: state.balanceReducer.wins,\r\n        name: state.balanceReducer.name,\r\n        threewins: state.balanceReducer['3wins'],\r\n        isDemo: state.balanceReducer.isDemo,\r\n        predict: state.balanceReducer.predict,\r\n        currentLang: state.switchOptions.lang,\r\n        step: state.switchOptions.step,\r\n        bannerPreview: state.adsOptions.banner,\r\n        isPreview: state.adsOptions.isPreview\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    // click,\r\n    userdata,\r\n    changeDemo,\r\n    createAdProp,\r\n    playClick,\r\n    transition,\r\n    setIsPreview\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RightSector);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\fireworks.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Dashboard.js",["330","331","332","333","334","335","336"],"import React, {useState, useEffect} from 'react';\r\nimport bitcoin from \"../../images/bitcoin.svg\";\r\nimport arrowUp from \"../../images/arrowUp.svg\";\r\nimport arrowDown from \"../../images/arrowDown.svg\";\r\nimport {connect} from \"react-redux\";\r\nimport store from '../../redux/store'\r\nimport {betLose, betWin, closeCongratulation, closeYourLose} from \"../../redux/actions\";\r\nimport {\r\n    bell,\r\n    click,\r\n    up_down,\r\n    fireworks,\r\n    you_lose,\r\n    muteToggle,\r\n    playTimer,\r\n    playTimer2,\r\n    stop,\r\n    stopBetTimer, stopGameTimer, playBetTimer, playGameTimer, playYouWon\r\n} from \"../../redux/actions/music\";\r\nimport Rates from \"./Rates\";\r\nimport {User} from \"../../api/User\";\r\nimport {predictClear, predictDown, predictUp, userdata} from \"../../redux/actions/game\";\r\nimport Rect from \"./Rect/Rect\";\r\nimport Timer from \"./Timer\";\r\nimport Online from \"./Online\";\r\nimport YouWon from '../../images/You_won (2).png';\r\nimport GoldCoins from '../../images/Gold_coins1.png';\r\nimport CoinUpImg from '../../images/coinUp.svg'\r\nimport CoinDownImg from '../../images/coinDown.svg'\r\n\r\n\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\n\r\n\r\nconst Dashboard = ({\r\n                       stopBetTimer,\r\n                       stopGameTimer,\r\n                       playBetTimer,\r\n                       playGameTimer,\r\n                       step,\r\n                       predictUp,\r\n                       betWin,\r\n                       betLose,\r\n                       fireworks,\r\n                       userdata,\r\n                       predictClear,\r\n                       predictDown,\r\n                       balance,\r\n                       predict,\r\n                       upBets,\r\n                       downBets,\r\n                       up,\r\n                       down,\r\n                       lastSeconds,\r\n                       widthMode,\r\n                       currentLang,\r\n                       up_down,\r\n                       you_lose,\r\n                       playTimer,\r\n                       playTimer2,\r\n                       stop,\r\n                       play,\r\n                       yourlose,\r\n                       closeYourLose,\r\n                       congratulation,\r\n                       closeCongratulation,\r\n                       playYouWon,\r\n                       lastWinGame\r\n                   }) => {\r\n    const [bet, setBet] = useState(.0001);\r\n    const [counter, setCounter] = useState(10);\r\n    const [gameStart, setGameStart] = useState(undefined);\r\n    const LANG = currentLang === \"en\" ? EN : RU;\r\n    let timeBet = lastSeconds % 20 === 0 || lastSeconds % 20 === 5;\r\n    let startGame = lastSeconds % 20 === 10 || lastSeconds % 20 === 15;\r\n\r\n    useEffect(() => {\r\n        if (startGame && gameStart === undefined) {\r\n            setGameStart(lastSeconds);\r\n            predictSubmit();\r\n        }\r\n\r\n    }, [lastSeconds])\r\n\r\n    useEffect(() => {\r\n        if (startGame && !!predict) {\r\n            stopBetTimer();\r\n            playGameTimer();\r\n            playTimer();\r\n        } else if (timeBet && !!predict) {\r\n            stopGameTimer();\r\n            playBetTimer();\r\n            playTimer2();\r\n        } else {\r\n            stopBetTimer();\r\n            stopGameTimer();\r\n        }\r\n\r\n    }, [startGame, timeBet, predict])\r\n\r\n    useEffect(() => {\r\n        if (yourlose === true) {\r\n            you_lose();\r\n            setTimeout(() => {\r\n                closeYourLose()\r\n            }, 3000);\r\n        }\r\n\r\n    }, [yourlose])\r\n\r\n    useEffect(() => {\r\n        if (congratulation === true) {\r\n            playYouWon();\r\n            setTimeout(() => {\r\n                closeCongratulation()\r\n            }, 4000);\r\n        }\r\n    }, [congratulation])\r\n\r\n    const setBetHandler = (e) => {\r\n        let bet = +e.target.value.slice(0, 5);\r\n        if (!bet) {\r\n            bet = 0.0001;\r\n        }\r\n        if (bet > 1) {\r\n            bet = 1;\r\n        }\r\n        setBet(bet || 0.0001);\r\n    }\r\n    const setBetStep = (bool) => {\r\n        const bets = bool ? +bet + .0001 : +bet - .0001;\r\n        console.log('bet')\r\n        if (!bets || +bets < 0) {\r\n            console.log('false')\r\n            setBet(0.0001);\r\n        }else if (+bets > 1) {\r\n            console.log('true')\r\n            setBet(1);\r\n        } else {\r\n            setBet(+bets.toFixed(4))\r\n        //    setBet(+bets)\r\n        }\r\n    }\r\n\r\n    const betDone = (e) => {\r\n        let rate = e.target.id;\r\n        up_down();\r\n        if (rate === 'up') {\r\n            playBetTimer();\r\n            playGameTimer();\r\n            predictUp({value: bet.toString()});\r\n        } else if (rate === 'down') {\r\n            playBetTimer();\r\n            playGameTimer();\r\n            predictDown({value: bet.toString()});\r\n        }\r\n    }\r\n\r\n    const predictSubmit = () => {\r\n        const timer = setInterval(() => {\r\n            setCounter(counter - 1);\r\n        }, 1000)\r\n        return setTimeout(() => {\r\n            clearInterval(timer);\r\n            setCounter(10);\r\n            User.userdata()\r\n                .then(data => {\r\n                    if (+data.data.data.lastWin === 1 && predict !== '') {\r\n                        betWin();\r\n                        // fireworks();\r\n                    } else if (+data.data.data.lastWin === -1 && predict !== '') {\r\n                        you_lose();\r\n                        betLose();\r\n                        userdata();\r\n                    } else if (up > 0 && down > 0) {\r\n                        userdata();\r\n                    } else {\r\n                        userdata();\r\n                    }\r\n                }).catch(e => {\r\n                console.log(e)\r\n            });\r\n            setGameStart(undefined);\r\n            predictClear();\r\n        }, 10000)\r\n    }\r\n\r\n    const btnDownHandler = (e) => {\r\n        e.preventDefault();\r\n        betDone(e);\r\n    }\r\n\r\n    if (congratulation) { // congratulation\r\n        return (\r\n            <div className={`${widthMode} row bottom-container`}>\r\n                {widthMode === \"desktop\" ? <Rates/> : <></>}\r\n                <div style={{zIndex: step === 3 ? \"10\" : \"\"}} className={`${widthMode} round dashboard congratulation`}>\r\n                    <img src={YouWon} className='congratulation__youWon-img'/>\r\n                    <img src={GoldCoins} className='congratulation__coins-img'/>\r\n                    <p className='congratulation__score'>{lastWinGame} <img className='congratulation__btc'\r\n                                                                            src={bitcoin} alt='btc'/></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (yourlose) { //yourlose\r\n        return (\r\n            <div className={`${widthMode} row bottom-container`}>\r\n                {widthMode === \"desktop\" ? <Rates/> : <></>}\r\n                <div style={{zIndex: step === 3 ? \"10\" : \"\"}} className={`${widthMode} round dashboard yourLose`}>\r\n                    <h1>You lose</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (startGame) { //startGame\r\n        return (\r\n            <div className={`${widthMode} row bottom-container`}>\r\n                {widthMode === \"desktop\" ? <Rates/> : <></>}\r\n                <div style={{zIndex: step === 3 ? \"10\" : \"\"}} className={`${widthMode} round dashboard big-timer`}>\r\n                    <Timer/>\r\n                    {startGame && !predict\r\n                        ? <span style={{display: startGame && !predict ? 'inline' : 'none'}}\r\n                                className=\"off text-center\">All bets are off</span>\r\n                        : <div style={{\r\n                            display: predict === 'up' || !predict ? 'inline' : 'none',\r\n                            transform: startGame && (predict === 'down' || !predict) ? 'scale(0)' : 'scale(1)'\r\n                        }} className=\"up\">\r\n                            <div style={{display: predict === 'down' ? \"none\" : \"inherit\"}} className=\"profit\">\r\n                                                    <span style={{\r\n                                                        fontSize: '21px',\r\n                                                        display: widthMode === \"mobile\" ? \"inline\" : \"inline\"\r\n                                                    }}\r\n                                                          className={currentLang + \" green\"}>{LANG.Training.UsualState.MakeBet.yourProfit} </span>\r\n                                <span style={{fontSize: '21px'}}>\r\n                                                        {up || down ? ((bet / (bet + upBets) * downBets) * 0.97).toFixed(6) : 0}\r\n                                                    </span>\r\n                                <img style={{marginTop: '-5px'}} src={bitcoin} width=\"15\" height=\"21\" alt=\"b\"/>\r\n                                <div className='coinImg'>\r\n                                    <img src={CoinUpImg} alt='coin'/>\r\n                                </div>\r\n                            </div>\r\n                        </div>}\r\n                    {startGame && (predict === 'up' || !predict)\r\n                        ? <></>\r\n                        :\r\n                        <div style={{display: (predict === 'down' || !predict) ? 'block' : 'none'}}\r\n                             className=\"down\">\r\n                            <div style={{display: predict === 'up' ? \"none\" : \"inherit\"}} className=\"profit\">\r\n                                                    <span style={{\r\n                                                        fontSize: '21px',\r\n                                                        display: widthMode === \"mobile\" ? \"inline\" : \"inline\"\r\n                                                    }}\r\n                                                          className={currentLang + \" red\"}>{LANG.Training.UsualState.MakeBet.yourProfit} </span>\r\n                                <span\r\n                                    style={{fontSize: '21px'}}>{up || down ? ((bet / (bet + downBets) * upBets) * 0.97).toFixed(6) : 0}\r\n                                                </span>\r\n                                <img style={{marginTop: '-5px'}} src={bitcoin} width=\"15\" height=\"21\" alt=\"b\"/>\r\n                                <div className='coinImg'>\r\n                                    <img src={CoinDownImg} alt='coin'/>\r\n                                </div>\r\n                            </div>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className={`${widthMode} row bottom-container`}>\r\n                {widthMode === \"desktop\" ? <Rates/> : <></>}\r\n                <div style={{zIndex: step === 3 ? \"10\" : \"\"}} className={`${widthMode} round dashboard`}>\r\n                    <div className=\"range\">\r\n                        <div className=\"form-label d-flex justify-content-between\">\r\n                            <div className='makeYourBet'>\r\n                                <h2 className={predict || startGame ? \"text-left\" : \"make-bet text-left\"}>\r\n                                    {/* {widthMode === \"desktop\" ? LANG.BettingRealMoney.UsualState.MakeBet.title : \"\"}</h2> */}\r\n                                    {LANG.BettingRealMoney.UsualState.MakeBet.title}</h2>\r\n                                <p className='setSize'>Set bet size</p>\r\n                            </div>\r\n                            <div className=\"balanceInput\">\r\n                                {widthMode === \"mobile\" ? <Online/> : <></>}\r\n                                <span className='balanceBtn minus' onClick={() => setBetStep(false)}>-</span>\r\n                                <span\r\n                                    className={balance - bet >= 0 ? 'balanceInput__balance' : 'balanceInput__balance red'}>\r\n                                    <input id=\"numberBet\" type=\"number\" step=\"0.0001\" min=\"0.0001\" max=\"1\"\r\n                                           className={balance - bet >= 0 ? '' : 'red'}\r\n                                           disabled={predict || !timeBet}\r\n                                           onInput={setBetHandler}\r\n                                           value={bet}/>\r\n                                    <img className=\"numberBet\" width=\"15\" src={bitcoin} alt=\"up\"/>\r\n                                </span>\r\n                                <span className='balanceBtn plus' onClick={() => setBetStep(true)}>+</span>\r\n                            </div>\r\n                        </div>\r\n                        <form onSubmit={e => e.preventDefault()}>\r\n                            <div className=\"form\">\r\n                                <div className=\"bet\">\r\n                                    <input min=\"0.0001\" max=\"1\" step=\"0.0001\"\r\n                                           type=\"range\"\r\n                                           disabled={predict || !timeBet || startGame}\r\n                                           value={bet}\r\n                                           style={{backgroundImage: `linear-gradient(to right, ${balance - bet >= 0 ? '#32D74B' : '#FF453A'} 0%, ${balance - bet >= 0 ? '#32D74B' : '#FF453A'} ${bet * 100}%, #fff ${bet * 100}%, white 100%)`}}\r\n                                           onChange={setBetHandler}\r\n                                           className={balance - bet >= 0 ? 'green-range' : 'red-range'}\r\n                                           id=\"range\"/>\r\n                                </div>\r\n                                <div className='wrap-btn'>\r\n\r\n                                    {startGame && (predict === 'down' || !predict)\r\n                                        ? <span style={{display: startGame && !predict ? 'flex' : 'none'}}\r\n                                                className=\"off\">All bets are off</span>\r\n                                        : <div style={{\r\n                                            display: predict === 'up' || !predict ? 'block' : 'none',\r\n                                            transform: startGame && (predict === 'down' || !predict) ? 'scale(0)' : 'scale(1)'\r\n                                        }} className=\"up\">\r\n                                            <div className=\"profit\">\r\n                                                    <span style={{display: widthMode === \"mobile\" ? \"block\" : \"inline\"}}\r\n                                                          className={\" green\"}>{LANG.BettingRealMoney.UsualState.MakeBet.yourProfit}</span>\r\n                                                <span>\r\n                                                    {up || down ? ((bet / (bet + upBets) * downBets) * 0.97).toFixed(6) : 0}\r\n                                                </span>\r\n                                                <img src={bitcoin} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                            </div>\r\n                                            <button disabled={predict || balance - bet < 0 || !timeBet}\r\n                                                    onClick={(e) => {\r\n                                                        e.preventDefault();\r\n                                                        betDone(e);\r\n                                                    }}\r\n                                                    className={\" btn green predict-btn\"}>{LANG.BettingRealMoney.UsualState.MakeBet.btnUp}\r\n\r\n                                                <img src={arrowUp} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                                <Rect idButton={'up'} mode={timeBet ? 'rectUp' : \"\"}/>\r\n                                            </button>\r\n                                        </div>}\r\n\r\n                                    {startGame && (predict === 'up' || !predict)\r\n                                        ? <></>\r\n                                        :\r\n                                        <div style={{display: (predict === 'down' || !predict) ? 'block' : 'none'}}\r\n                                             className=\"down\">\r\n                                            <div className=\"profit\">\r\n                                                    <span style={{display: widthMode === \"mobile\" ? \"block\" : \"inline\"}}\r\n                                                          className={\" red\"}>{LANG.BettingRealMoney.UsualState.MakeBet.yourProfit}</span>\r\n                                                <span>\r\n                                                    {up || down ? ((bet / (bet + downBets) * upBets) * 0.97).toFixed(6) : 0}\r\n                                                </span>\r\n                                                <img src={bitcoin} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                            </div>\r\n                                            <button disabled={predict || balance - bet < 0 || !timeBet}\r\n                                                    onClick={(e) => {\r\n                                                        btnDownHandler(e)\r\n                                                    }}\r\n                                                    className={\" btn red predict-btn\"}\r\n                                                    id=\"down\">{LANG.BettingRealMoney.UsualState.MakeBet.btnDown}\r\n                                                <img src={arrowDown} width=\"15\" height=\"20\" alt=\"b\"/>\r\n                                                <Rect idButton={'down'} mode={timeBet ? 'rectDown' : \"\"}/>\r\n                                            </button>\r\n                                        </div>}\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        balance: state.balanceReducer.balance,\r\n        course: state.courseReducer.course,\r\n        currentCourse: state.courseReducer.currentCourse,\r\n        currentTime: state.courseReducer.currentTime,\r\n        lastSeconds: state.courseReducer.lastSeconds,\r\n        lastWin: state.balanceReducer.lastWin,\r\n        lastWinGame: state.balanceReducer.lastWinGame,\r\n        congratulation: state.balanceReducer.congratulation,\r\n        predict: state.balanceReducer.predict,\r\n        yourlose: state.balanceReducer.yourlose,\r\n        downBets: state.balanceReducer.downBets,\r\n        upBets: state.balanceReducer.upBets,\r\n        up: state.balanceReducer.up,\r\n        down: state.balanceReducer.down,\r\n        widthMode: state.switchOptions.widthMode,\r\n        currentLang: state.switchOptions.lang,\r\n        step: state.switchOptions.step,\r\n        play: state.soundReducer.play,\r\n    }\r\n}\r\nconst mapDispatchToProps = {betWin, betLose, predictUp, predictDown, predictClear, click, up_down, you_lose, bell, stop, playTimer, playTimer2, fireworks, closeCongratulation, muteToggle, userdata, stopBetTimer, stopGameTimer, playBetTimer, playGameTimer, closeYourLose, playYouWon\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\types.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\sound\\Sound.js",["337","338"],"import React, {useRef, useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {stop} from '../redux/actions/music';\r\n\r\nconst Sound = ({play, param, stop, mute}) => {\r\n\r\n    const audRef = useRef(null);\r\n    const handlePlay = () => {\r\n        audRef.current.play();\r\n    }\r\n    const muted = () => {\r\n        audRef.current.muted = !mute;\r\n    }\r\n    useEffect(() => {\r\n        if (param.id === play) {\r\n            audRef.current.id === 'fireworks' ? audRef.current.volume = 0.3 : audRef.current.volume = 0.7;\r\n            audRef.current.id === 'timer' ? audRef.current.playbackRate = 1.06 : audRef.current.playbackRate = 1.0;\r\n            handlePlay();\r\n        }\r\n        stop();\r\n    }, [param.id, play, handlePlay]);\r\n\r\n    useEffect(() => {\r\n        muted();\r\n    }, [muted]);\r\n\r\n    return (\r\n        <div className=\"sound\">\r\n            <audio ref={audRef} id={param.id} >\r\n                <source src={param.effect} type=\"audio/mpeg\" />\r\n            </audio>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        play: state.soundReducer.play,\r\n        mute: state.soundReducer.mute\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    stop\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sound);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\game.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\sound.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\entry.js",["339"],"import {\r\n    AUTHORIZATION, CREATE_AD, DEVICE_WIDTH, FIRST_IN,\r\n    GET_COURSE,\r\n    GET_LOCATION, GOAWAY, LANG_MODE, LOGOUT,\r\n    PROHIBITION,\r\n    REGISTRATION, SWITCH_STEP, TOUCHSTART, VIEW_MODE\r\n} from \"../types\";\r\n\r\nconst initialState = {\r\n    auth: false,\r\n    reg: false,\r\n    geoposition: '',\r\n    course: [],\r\n    currentCourse: 0,\r\n    currentTime: 0,\r\n    lastSeconds: undefined,\r\n    logoutQuestion: false,\r\n    createAd: false,\r\n    unauthorized: false,\r\n    widthMode: window.outerWidth > 756 ? \"desktop\" : \"mobile\",\r\n    view: false,\r\n    lang: \"en\",\r\n    step: 0,\r\n    firstIn: false,\r\n    touchstart: false\r\n}\r\n\r\nexport const switchOptions = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CREATE_AD:\r\n            return {...state, createAd: !state.createAd};\r\n        case DEVICE_WIDTH:\r\n            return {...state, widthMode: action.payload};\r\n        case VIEW_MODE:\r\n            return {...state, view: action.payload};\r\n        case LANG_MODE:\r\n            return {...state, lang: action.payload};\r\n        case SWITCH_STEP:\r\n            return {...state, step: action.payload};\r\n        case TOUCHSTART:\r\n            return {...state, touchstart: true};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case AUTHORIZATION:\r\n            if (sessionStorage.getItem('token') !== null) {\r\n                return {...state, auth: true, unauthorized: false};\r\n            } else {\r\n                return {...state, auth: false};\r\n            }\r\n        case GOAWAY:\r\n            return {\r\n                ...state,\r\n                unauthorized: true\r\n            };\r\n        case PROHIBITION:\r\n            return {...state, auth: false};\r\n        case REGISTRATION:\r\n            return {...state, reg: !state.reg}\r\n        case LOGOUT:\r\n            return {...state, logoutQuestion: !state.logoutQuestion}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const geoReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case GET_LOCATION:\r\n            return {...state, geoposition: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const courseReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_COURSE:\r\n            return {\r\n                ...state,\r\n                course: action.payload.bitcoins,\r\n                currentCourse: action.payload.bitcoins ? action.payload.bitcoins[action.payload.bitcoins.length - 1] : 0,\r\n                currentTime: action.payload.times ? action.payload.times[action.payload.times.length - 1] : 0,\r\n                lastSeconds: action.payload.lastSeconds\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\api\\Api.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Main\\Timer.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Presentation.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step1.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step3.js",["340"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport imgPerson from '../../images/person x5F 3 1.png'\r\nimport {switchStep} from '../../redux/actions/index';\r\nimport {switchView} from \"../../redux/actions\";\r\nimport {playClick} from '../../redux/actions/music';\r\nimport {connect} from 'react-redux';\r\nimport {EN} from '../../languages/en'\r\nimport {RU} from '../../languages/ru'\r\n\r\nconst Step3 = ({playClick, switchStep, currentLang, widthMode, switchView}) => {\r\n    const LANG = currentLang === 'en' ? EN : RU;\r\n    const isDesktop = widthMode === \"desktop\" ? true : false;\r\n    if (!isDesktop) {\r\n        switchView(false)\r\n    }\r\n    return (\r\n        <div className=\"step step3\">\r\n            <img className='step-img' src={imgPerson} alt='person'/>\r\n\r\n\r\n            <div className='step-content'>\r\n                <ul className='list-lines'>\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                </ul>\r\n                <h3 className='step-content__title'>{LANG.Intro.Step3.title}</h3>\r\n                <p className='step-content__content'>{LANG.Intro.Step3.content}</p>\r\n                <ul className=\"step-nav\">\r\n                    <li className='step-nav__item' onClick={() => {\r\n                        switchStep(2);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.prev}</span>\r\n                    </li>\r\n                    <li className='step-nav__item step-nav_btnSkip' onClick={() => {\r\n                        switchStep(0);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.skip}</span>\r\n                    </li>\r\n                    <li className='step-nav__item' onClick={() => {\r\n                        switchStep(4);\r\n                        playClick();\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.next}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentLang: state.switchOptions.lang,\r\n        widthMode: state.switchOptions.widthMode\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    switchStep,\r\n    playClick,\r\n    switchView\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Step3)","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step5.js",["341"],"import React from 'react'\r\nimport imgPerson from '../../images/person x5F 1 1.png'\r\nimport {switchStep} from '../../redux/actions/index';\r\nimport {switchView} from \"../../redux/actions\";\r\nimport {click, playClick} from '../../redux/actions/music';\r\nimport {connect} from 'react-redux';\r\nimport {EN} from '../../languages/en'\r\nimport {RU} from '../../languages/ru'\r\n\r\n\r\nconst Step5 = ({playClick, switchStep, currentLang, switchView, widthMode}) => {\r\n    const LANG = currentLang === 'en' ? EN : RU;\r\n    const isDesktop = widthMode === \"desktop\" ? true : false;\r\n    if (!isDesktop) {\r\n        switchView(true)\r\n    }\r\n\r\n    return (\r\n        <div className=\"step step5\">\r\n            <img className='step-img' src={imgPerson} alt='person'/>\r\n\r\n\r\n            <div className='step-content'>\r\n                <ul className='list-lines'>\r\n\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n                    <li className=\"list-lines__item\" />\r\n\r\n                </ul>\r\n                <h3 className='step-content__title'>{LANG.Intro.Step5.title}</h3>\r\n                <p className='step-content__content'>{LANG.Intro.Step5.content}</p>\r\n                <ul className=\"step-nav\">\r\n\r\n                    <li className='step-nav__item' onClick={() => {\r\n                        switchStep(4);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.prev}</span>\r\n                    </li>\r\n                    <li className='step-nav__item step-nav_btnSkip' onClick={() => {\r\n                        switchStep(0);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.skip}</span>\r\n                    </li>\r\n                    <li className='step-nav__item' onClick={() => {\r\n                        switchStep(0);\r\n                        playClick()\r\n                    }}>\r\n                        <span>{LANG.Intro.btnIntro.finish}</span>\r\n\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentLang: state.switchOptions.lang,\r\n        widthMode: state.switchOptions.widthMode\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    switchStep,\r\n    playClick,\r\n    switchView\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Step5)\r\n\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step4.js",["342","343","344"],"import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport imgPerson from '../../images/person x4F 4 1.png'\r\nimport imgClickOnWallet from '../../images/clickOnWallet.png'\r\nimport {switchStep} from '../../redux/actions/index';\r\nimport {switchView} from \"../../redux/actions\";\r\nimport {playClick} from '../../redux/actions/music';\r\nimport {connect} from 'react-redux';\r\nimport {EN} from '../../languages/en'\r\nimport {RU} from '../../languages/ru'\r\n\r\nconst Step4 = ({playClick, switchStep, currentLang, switchView, widthMode, view}) => {\r\n    const [clickOnWalllet, setClickOnWalllet] = useState(false)\r\n    const LANG = currentLang === 'en' ? EN : RU;\r\n    const isDesktop = widthMode === \"desktop\" ? true : false;\r\n    if (isDesktop === true || view === true) {\r\n        return (\r\n            <div className=\"step step4\">\r\n                <img className='step-img' src={imgPerson} alt='person'/>\r\n                <div className='step-content'>\r\n                    <ul className='list-lines'>\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                    </ul>\r\n                    <h3 className='step-content__title'>{LANG.Intro.Step4.title}</h3>\r\n                    <p className='step-content__content'>{LANG.Intro.Step4.content}</p>\r\n                    <ul className=\"step-nav\">\r\n                        <li className='step-nav__item' onClick={() => {\r\n                            switchView(false);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.prev}</span>\r\n                        </li>\r\n                        <li className='step-nav__item step-nav_btnSkip' onClick={() => {\r\n                            switchStep(0);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.skip}</span>\r\n                        </li>\r\n                        <li className='step-nav__item' onClick={() => {\r\n                            switchStep(5);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.next}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n                \r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"step step4 clickOnWallet\">\r\n                <img className='step-img' src={imgClickOnWallet} alt='person'/>\r\n                <div className='step-content'>\r\n                    <ul className='list-lines'>\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                        <li className=\"list-lines__item\" />\r\n                    </ul>\r\n                    <h3 className='step-content__title'>{LANG.Intro.ClickOnWallet.title}</h3>\r\n                    <p className='step-content__content'>{LANG.Intro.ClickOnWallet.content}</p>\r\n                    <ul className=\"step-nav\">\r\n                        <li className='step-nav__item' onClick={() => {\r\n                            switchStep(3);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.prev}</span>\r\n                        </li>\r\n                        <li className='step-nav__item step-nav_btnSkip' onClick={() => {\r\n                            switchStep(0);\r\n                            playClick()\r\n                        }}>\r\n                            <span>{LANG.Intro.btnIntro.skip}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentLang: state.switchOptions.lang,\r\n        widthMode: state.switchOptions.widthMode,\r\n        view: state.switchOptions.view\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    switchStep,\r\n    playClick,\r\n    switchView\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Step4)","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Intro\\Step2.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\index.js",[],["345","346"],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\ImagePreview.js",["347","348"],"import React from \"react\";\r\n// hooks\r\nimport useImagePreview from \"../../useImagePreview\";\r\nimport {addBanner, setIsPreview} from '../../../redux/actions/advertising'\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ImagePreview = ({addBanner, banner, isPreview, previewBanner, setIsPreview}) => {\r\n  const [image, setFile] = useImagePreview();\r\n  let history = useHistory()\r\n\r\n  const encodeImageFileAsURL = (element) => {\r\n    let file = element.target.files[0];\r\n    let reader = new FileReader();\r\n    reader.onloadend = function() {\r\n      addBanner(reader.result);\r\n    }\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Ad creative</h2>\r\n      <div className=\"wrapper-input-file\">\r\n        <div className=\"label-file\">\r\n          Select a banner to add <br />\r\n          275 x 270 px\r\n        </div>\r\n\r\n        <div className=\"wrap-input\">\r\n          <label className=\"dashed\" htmlFor=\"ad-file\">\r\n            {previewBanner ? (<img className=\"image-preview\" src={banner} />) :\r\n            (image ? (\r\n              <img className=\"image-preview\" src={image} />\r\n            ) : (\r\n              <div className=\"description\">Drag and drop file here or</div>\r\n            ))\r\n            }\r\n            \r\n            <input onChange={(e) => {setFile(e); encodeImageFileAsURL(e)}} type=\"file\" id=\"ad-file\"  />\r\n          </label>\r\n\r\n          <label htmlFor=\"ad-file\" className=\"btn-file\">\r\n            Choose file\r\n          </label>\r\n          <span onClick={() => {setIsPreview(true); history.push('/game')}} className='btn-ad-preview'>Ad Preview</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    banner: state.adsOptions.banner,\r\n    isPreview: state.adsOptions.isPreview,\r\n    previewBanner: state.adsOptions.previewBanner\r\n  }\r\n  \r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addBanner,\r\n  setIsPreview\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImagePreview);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\Tabs.js",["349"],"import React, {useEffect, useState} from \"react\";\r\n// components\r\nimport {RangeInput} from \"./FormInput\";\r\n// styles\r\nimport \"./style.scss\";\r\n// images\r\nimport bitcoin from \"../../../../../images/bitcoin.svg\";\r\nimport dollar from \"../../../../../images/dollar.svg\";\r\nimport {connect} from \"react-redux\";\r\nimport {setBudget} from \"../../../../../redux/actions/advertising\";\r\n\r\n\r\nlet socket = new WebSocket(\"wss://bitcybets.com:8080/serv\");\r\nlet bitcoins = [];\r\nsocket.onmessage = async e => {\r\n    (JSON.parse(e.data)).forEach(course => {\r\n        bitcoins.push(course.Bitcoin);\r\n    });\r\n}\r\n\r\nconst Tabs = ({tabs, budget, setBudget, balance}) => {\r\n    let currentCourse = bitcoins[bitcoins.length - 1];\r\n    // useEffect(() => socket.close());\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    return (\r\n        <div className=\"tabsContainer\">\r\n            <div className=\"tabs\">\r\n                {tabs.map(({id, label}) => (\r\n                    <div key={id}\r\n                        className={activeTab === id ? \"activeTab\" : \"tab\"}\r\n                        onClick={() => setActiveTab(id)}>\r\n                        {label}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"daily\">\r\n                <span>Daily budget</span>\r\n                <span className=\"opacity\">Actual amount spend daily may vary</span>\r\n                <div>\r\n                    <span className=\"opacity\">1 click = 1 $</span>\r\n                    <span style={{marginLeft: \"60px\"}} className=\"opacity\">1 display = 0.05 $</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"estimated\">\r\n                <div className=\"estimated-perDay\">\r\n                    <div style={{textAlign: \"left\"}}>\r\n                        Estimated 1K – 1,5K people <br/>\r\n                        reached per day\r\n                    </div>\r\n\r\n                    <div className=\"amount\">\r\n                        <div className=\"amount-btc\">\r\n                            {budget > 0 ? +budget.toFixed(4) : 0}<img src={bitcoin} alt=\"btc\"/>\r\n                        </div>\r\n                        <div className=\"amount-dollar website-block\">\r\n                            <input onInput={e => setBudget(+e.target.value / +currentCourse)} value={(+budget * +currentCourse).toFixed(0)} className=\"dollarContainer\" />\r\n                            <img src={dollar} alt=\"dollar\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <RangeInput withError min={50} max={50000} course={currentCourse} balance={(balance * currentCourse)}/>\r\n            </div>\r\n            <div className=\"content\">{tabs[activeTab]?.content}</div>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        budget: state.adsOptions.budget,\r\n        balance: state.balanceReducer.balance,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    setBudget\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tabs);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\components\\FormInput.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Audience\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Footer\\index.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\useImagePreview.js",["350"],"import { useState } from \"react\";\r\n\r\nexport default () => {\r\n  const [image, setImage] = useState(null);\r\n\r\n  const setFile = ({ target }) => {\r\n    const localURL = URL.createObjectURL(target.files[0]);\r\n\r\n    setImage(localURL);\r\n  };\r\n\r\n  return [image, setFile];\r\n};\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Duration\\Duration.js",["351"],"import React, { useState, useEffect } from \"react\";\r\nimport dayjs from \"dayjs\";\r\n// components\r\nimport { Tabs, TimeInput, DateInput } from \"./components\";\r\n// style\r\nimport \"./style.scss\";\r\nimport {connect} from \"react-redux\";\r\nimport {setEndDate, setEndTime, setStartDate, setStartTime, setIsCorrectDateToStore} from \"../../../../redux/actions/advertising\";\r\n\r\nconst Duration = ({setStartDate, setStartTime, setEndDate, setEndTime, startTime, setIsCorrectDateToStore, isCorrectDateFromStore}) => {\r\n  const [dateStart, setDateStart] = useState(0);\r\n  const [timeStart, setTimeStart] = useState(0);\r\n  const [dateEnd, setDateEnd] = useState(0);\r\n  const [timeEnd, setTimeEnd] = useState(0);\r\n  const [isStartDate, setIsStartDate] = useState(true);\r\n  const [isCorrectDate, setIsCorrectDate] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const dateNow = dayjs().valueOf(true);\r\n    let enteredStartDate = dayjs(`${dateStart}T${timeStart}`).valueOf(true);\r\n\t  let enteredEndDate = dayjs(`${dateEnd}T${timeEnd}`).valueOf(true);\r\n    if(dateStart !== 0 && timeStart !== 0) {\r\n      if(enteredStartDate > dateNow) {\r\n\t\t  console.log('up')\r\n        setIsStartDate(true)\r\n      } else if (enteredStartDate < dateNow) {\r\n\t\t  console.log('down')\r\n        setIsStartDate(false)\r\n      }\r\n    }\r\n\r\n\tif(dateStart !== 0 && timeStart !== 0 && dateEnd !==0 && timeEnd !== 0) {\r\n\t\tif(enteredEndDate > enteredStartDate) {\r\n\t\t\tsetIsCorrectDate(true)\r\n\t\t} else if (enteredEndDate < enteredStartDate) {\r\n\t\t\tsetIsCorrectDate(false)\r\n\t\t}\r\n\t\t// console.log(isCorrectDate)\r\n\t}\r\n\r\n\tif(isStartDate && isCorrectDate) {\r\n    console.log('y')\r\n\t\tsetIsCorrectDateToStore(true)\r\n\t} else {\r\n    console.log('n')\r\n\t\tsetIsCorrectDateToStore(false)\r\n\t}\r\n    \r\n  }, [dateStart, timeStart, dateEnd, timeEnd])\r\n\r\n  \r\n\r\n  const tabs = [\r\n    {\r\n      id: 0,\r\n      label: \"Choose when this ad ends\",\r\n      content: (\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"20px\" }}>\r\n          <div style={{ display: \"flex\", gap: \"95px\"}} >\r\n            <DateInput onChange={(e) => {setStartDate(e); setDateStart(e)}} label=\"Start date\" invalid={isStartDate ? false : true}/>\r\n            <TimeInput onChange={(e) => {setStartTime(e); setTimeStart(e)}} label=\"Start time\" invalid={isStartDate ? false : true}/>\r\n          </div>\r\n          <div style={{ display: \"flex\", gap: \"95px\" }}>\r\n            <DateInput onChange={(e) => {setEndDate(e); setDateEnd(e)}} label=\"End date\" invalid={isCorrectDate ? false : true} />\r\n            <TimeInput onChange={(e) => {setEndTime(e); setTimeEnd(e)}} label=\"End time\" invalid={isCorrectDate ? false : true} />\r\n          </div>\r\n          \r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      id: 1,\r\n      label: \"Run this ad continuously\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"duration\">\r\n      <h2>Duration</h2>\r\n\r\n      <Tabs tabs={tabs} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(state.adsOptions.isCorrectDate)\r\n  return {\r\n    isCorrectDateFromStore: state.adsOptions.isCorrectDate\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    setStartDate,\r\n    setStartTime,\r\n    setEndDate,\r\n    setEndTime,\r\n\tsetIsCorrectDateToStore\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Duration);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Audience\\Audience.js",["352"],"import React, {useState} from \"react\";\r\nimport {countryList} from \"../../../../country/country\";\r\nimport {timeZone} from \"../../../../country/timezone\";\r\n// component\r\n// styles\r\nimport \"./styles.scss\";\r\nimport {addCountry, deleteCountryAndTimeZone} from \"../../../../redux/actions/advertising\";\r\nimport {connect} from \"react-redux\";\r\nimport closeImg from '../../../../images/close.png'\r\n\r\n\r\nconst Audience = ({addCountry, country_codes_timezones, deleteCountryAndTimeZone}) => {\r\n    const [country, setCountry] = useState(\"\");\r\n    const [zone, setZone] = useState(\"\");\r\n    const writeCountry = (e) => {\r\n        setCountry(e.target.value);\r\n    }\r\n    const writeZone = (e) => {\r\n        setZone(e.target.value);\r\n    }\r\n    const addCountryTimezone = (e) => {\r\n        e.preventDefault();\r\n        if (country && zone) {\r\n            addCountry({[country]: zone});\r\n        }\r\n    }\r\n    const closeBtn = index => {\r\n        console.log(index)\r\n    }\r\n    return (\r\n        <div className=\"audience\">\r\n            <h2>Audience</h2>\r\n            <ul className='list-country-timeZone'>\r\n                {country_codes_timezones.map((item, index) => (\r\n                    <li className='list-country-timeZone__item'>\r\n                        <span className='item-list selectInput'>{Object.keys(item)}</span>\r\n                        <span className='item-list selectInput'>{Object.values(item)}</span>\r\n                        <span className='item-list-close' >\r\n                            <img src={closeImg} alt='close' onClick={() => {deleteCountryAndTimeZone(index)}}/>\r\n                        </span>\r\n                    </li>\r\n                ))}\r\n                \r\n            </ul>\r\n            <div className=\"content\">\r\n                <div className=\"block\">\r\n                    <div style={{width: \"100%\"}}>\r\n                        <label>Country</label>\r\n                        <div className=\"selectInput\">\r\n                            <select value={country} required onChange={writeCountry}>\r\n                                <option>All</option>\r\n                                {Object.keys(countryList).map((item, index) => (\r\n                                    <option key={index + 3} value={countryList[item]}>{item}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"addButton\">\r\n                        <button onClick={(e) => {addCountryTimezone(e)}}>+</button>\r\n                        <span>Add country</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"block\">\r\n                    <div style={{width: \"100%\"}}>\r\n                        <label>Time zone</label>\r\n                        <div className=\"selectInput\">\r\n                            <select value={zone} required onChange={writeZone}>\r\n                                <option>Choose</option>\r\n                                {timeZone.map((item, index) => (\r\n                                    <option key={index + 5} value={item}>{item}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        country_codes_timezones: state.adsOptions.country_codes_timezones\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    addCountry,\r\n    deleteCountryAndTimeZone\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Audience);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Footer\\Footer.js",["353"],"import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {setIsPreview} from '../../../../redux/actions/advertising'\r\n// styles\r\nimport \"./style.scss\";\r\n\r\n\r\nconst Footer = ({setIsPreview, isCorrectDate}) => {\r\n    let history = useHistory()\r\n\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <button type='submit'>Promote now</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isCorrectDate: state.adsOptions.isCorrectDate\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    setIsPreview\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\privacy.en.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\languages\\privacy.ru.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\reducers\\advertising.js",["354","355"],"import { act } from \"react-dom/test-utils\";\r\nimport {\r\n    ADD_BANNER,\r\n    ADD_COUNTRY,\r\n    SET_BUDGET,\r\n    SET_END_DATE,\r\n    SET_END_TIME,\r\n    SET_START_DATE,\r\n    SET_START_TIME,\r\n    SET_TIMEZONE,\r\n    SET_WEB_SITE,\r\n    DELETE_COUNTRY_AND_TIMEZONE, \r\n    GET_LIST_ADS,\r\n    AD_DETAIL,\r\n    IS_PREVIEW,\r\n    PREVIEW_BANNER,\r\n    IS_CORRECT_DATE\r\n} from \"../types\";\r\n\r\nconst initialState = {\r\n    banner: \"base64\",\r\n    website_url: \"\",\r\n    country_codes_timezones: [],\r\n    banner_start_date: \"yyyy-mm-dd\",\r\n    banner_start_time: \"hh:mm:ss\",\r\n    banner_end_date: \"yyyy-mm-dd\",\r\n    banner_end_time: \"hh:mm:ss\",\r\n    budget: \"0\",\r\n    currentList: [],\r\n    finishedList: [],\r\n    adDetail: {},\r\n    isPreview: false,\r\n    previewBanner: false,\r\n    isCorrectDate: false\r\n}\r\n\r\nexport const adsOptions = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_BANNER:\r\n            return {...state, banner: action.payload};\r\n        case SET_WEB_SITE:\r\n            return {...state, website_url: action.payload};\r\n        case ADD_COUNTRY:\r\n            return {...state, country_codes_timezones: [...state.country_codes_timezones, action.payload]};\r\n        case SET_START_DATE:\r\n            return {...state, banner_start_date: action.payload};\r\n        case SET_START_TIME:\r\n            return {...state, banner_start_time: action.payload};\r\n        case SET_END_DATE:\r\n            return {...state, banner_end_date: action.payload};\r\n        case SET_END_TIME:\r\n            return {...state, banner_end_time: action.payload};\r\n        case SET_BUDGET:\r\n            return {...state, budget: action.payload};\r\n        case GET_LIST_ADS:\r\n            return {...state, currentList: action.payload.current, finishedList: action.payload.finished}\r\n        case DELETE_COUNTRY_AND_TIMEZONE:\r\n            return {...state, country_codes_timezones: [\r\n                ...state.country_codes_timezones.slice(0, action.payload),\r\n                ...state.country_codes_timezones.slice(action.payload + 1)\r\n            ]}\r\n        case AD_DETAIL: \r\n            return {...state, adDetail: action.payload}\r\n        case IS_PREVIEW: \r\n            return {...state, isPreview: action.payload}\r\n        case PREVIEW_BANNER: \r\n            return {...state, previewBanner: action.payload}\r\n        case IS_CORRECT_DATE:\r\n            return {...state, isCorrectDate: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\ListAds.js",["356","357"],"import React, {useState, useEffect} from \"react\"\r\nimport \"./ads.scss\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {playClick} from \"../../redux/actions/music\";\r\nimport {getCurrentList, getDetails} from \"../../redux/actions/advertising\"\r\nimport {connect} from \"react-redux\";\r\nimport Wallet from \"./components/Wallet\"\r\nimport {EN} from \"../../languages/en\";\r\nimport {RU} from \"../../languages/ru\";\r\n\r\nconst ListAds = ({playClick, name, balance, currentLang, currentList, finishedList, getCurrentList, getDetails}) => {\r\n    let history = useHistory();\r\n    const LANG = currentLang === \"en\" ? EN : RU;\r\n    const [isCurrent, setIsCurrent] = useState(true)\r\n    // const [finished, setFinished] = useState(false)\r\n    const [arrList, setArrList] = useState(currentList)\r\n\r\n\r\n    useEffect(() => {\r\n        if (isCurrent) {\r\n            setArrList(currentList);\r\n        } else {\r\n            setArrList(finishedList);\r\n        }\r\n    }, [isCurrent])\r\n\r\n    useEffect(() => {\r\n        getCurrentList();\r\n        setTimeout(() => {\r\n            setArrList(currentList);\r\n        },  500)\r\n    }, [])\r\n\r\n    return (\r\n        <div className='listBlock'>\r\n            <div className='round-dark listAds'>\r\n                <h1 className='listAds__title'>{LANG.Ads.MyAds.title}</h1>\r\n                <div className='ads-switch'>\r\n                    <span onClick={() => {\r\n                        setIsCurrent(true)\r\n                    }}\r\n                          className={!isCurrent ? 'ads-switch__item' : 'ads-switch__item active'}>{LANG.Ads.MyAds.current}</span>\r\n                    <span onClick={() => {\r\n                        setIsCurrent(false)\r\n                    }}\r\n                          className={isCurrent ? 'ads-switch__item' : 'ads-switch__item active'}>{LANG.Ads.MyAds.finished}</span>\r\n                </div>\r\n                <ul className='ads-list'>\r\n                    {arrList.length !== 0\r\n                        ? arrList.map((item, index) => (\r\n                            <React.Fragment>\r\n                                <li key={index * 2} className='ads-list__item' onClick={() => {\r\n                                    getDetails(item);\r\n                                    history.push('/myad')\r\n                                }}>\r\n                                    <span className='item__title item__url'>{item.website_url || \"mysite.com\"}</span>\r\n\r\n                                    <span className='item__date'>{item.end_date}</span>\r\n                                </li>\r\n                            </React.Fragment>\r\n                        )) : <h1 className='ads-list__not-ads'>{LANG.Ads.MyAds.notAds}</h1>\r\n                    }\r\n                </ul>\r\n            </div>\r\n            <Wallet input={false}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentLang: state.switchOptions.lang,\r\n        balance: state.balanceReducer.balance,\r\n        name: state.balanceReducer.name,\r\n        currentList: state.adsOptions.currentList,\r\n        finishedList: state.adsOptions.finishedList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    playClick,\r\n    getCurrentList,\r\n    getDetails\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListAds)\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\components\\Wallet.js",["358"],"import React, {useEffect} from 'react'\r\nimport '../ads.scss'\r\nimport {Link} from 'react-router-dom';\r\nimport deposit from '../../../images/deposit.svg';\r\nimport {playClick} from \"../../../redux/actions/music\";\r\nimport {connect} from 'react-redux';\r\nimport {changeDemo} from \"../../../redux/actions/game\";\r\n\r\nconst Wallet = ({name, balance, playClick, input, isDemo, changeDemo}) => {\r\n    useEffect(() => {\r\n        if (isDemo) {\r\n            changeDemo();\r\n        }\r\n    }, [])\r\n    return (\r\n\r\n        <div className={!input ? 'round-dark wallet' : 'round-dark wallet top'}>\r\n            <div className='wallet__title'>My wallet</div>\r\n            <div className='wallet__name-title'>Name</div>\r\n            <div className='wallet__name'>{name}</div>\r\n            <div className='wallet__balance-title'>Balance</div>\r\n            <div className='wallet__balance'>{balance} &#8383;</div>\r\n            <Link to=\"/refill\" className=\"wallet__deposit btn up\" onClick={playClick}>Deposit\r\n                <img className='deposit' src={deposit} alt=\"deposit\"/>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        balance: state.balanceReducer.balance,\r\n        name: state.balanceReducer.name,\r\n        isDemo: state.balanceReducer.isDemo,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    playClick,\r\n    changeDemo\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet)\r\n","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\country\\country.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\country\\timezone.js",[],"F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\redux\\actions\\advertising.js",["359","360"],"import {User} from '../../api/User' \r\nimport {\r\n    ADD_BANNER,\r\n    ADD_COUNTRY, SET_BUDGET,\r\n    SET_END_DATE, SET_END_TIME,\r\n    SET_START_DATE,\r\n    SET_START_TIME,\r\n    SET_TIMEZONE,\r\n    SET_WEB_SITE,\r\n    DELETE_COUNTRY_AND_TIMEZONE, \r\n    GET_LIST_ADS,\r\n    AD_DETAIL,\r\n    IS_PREVIEW,\r\n    PREVIEW_BANNER,\r\n    IS_CORRECT_DATE\r\n} from \"../types\";\r\n\r\nexport function addBanner(banner) {\r\n    return {type: ADD_BANNER, payload: banner}\r\n}\r\nexport function setWebsite(website) {\r\n    return {type: SET_WEB_SITE, payload: website}\r\n}\r\nexport function addCountry(country, zone) {\r\n    return {type: ADD_COUNTRY, payload: country, zone}\r\n}\r\nexport function setStartDate(date) {\r\n    return {type: SET_START_DATE, payload: date}\r\n}\r\nexport function setStartTime(time) {\r\n    return {type: SET_START_TIME, payload: time}\r\n}\r\nexport function setEndDate(date) {\r\n    return {type: SET_END_DATE, payload: date}\r\n}\r\nexport function setEndTime(time) {\r\n    return {type: SET_END_TIME, payload: time}\r\n}\r\nexport function setTimezone(timezone) {\r\n    return {type: SET_TIMEZONE, payload: timezone}\r\n}\r\nexport function setBudget(budget) {\r\n    return {type: SET_BUDGET, payload: budget}\r\n}\r\nexport function deleteCountryAndTimeZone(index) {\r\n    return {type: DELETE_COUNTRY_AND_TIMEZONE, payload: index}\r\n}\r\nexport function getCurrentList() {\r\n    let obj = {\r\n        current: new Array(),\r\n        finished: new Array()\r\n    }\r\n    User.listAds()\r\n        .then(data => {\r\n            if(data.status === 200) {\r\n                for(let i = 0; i < data.data.data.length; i++) {\r\n                    if(data.data.data[i].status === 'ended') {\r\n                        obj.finished.push(data.data.data[i])\r\n                    } else {\r\n                        obj.current.push(data.data.data[i])\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(e => console.log(e))\r\n    return {type: GET_LIST_ADS, payload: obj}\r\n}\r\n\r\nexport function getDetails(obj) {\r\n    return {type: AD_DETAIL, payload: obj}\r\n}\r\n\r\nexport function setIsPreview(bool) {\r\n    return {type: IS_PREVIEW, payload: bool}\r\n}\r\n\r\nexport function setPreviewBanner(bool) {\r\n    return {type: PREVIEW_BANNER, payload: bool}\r\n}\r\nexport function setIsCorrectDateToStore(bool) {\r\n    return {type: IS_CORRECT_DATE, payload: bool}\r\n}","F:\\Open Server\\OSPanel\\domains\\localhost\\bitcybets\\src\\components\\Ads\\MyAd.js",["361","362","363"],"import React, {useState} from 'react';\r\nimport './ads.scss';\r\nimport {addBanner} from '../../redux/actions/advertising'\r\nimport { connect } from \"react-redux\";\r\nimport Wallet from './components/Wallet'\r\n\r\nconst MyAd = ({objData}) => {\r\n    const [image, setFile] = useState();\r\n    console.log(objData);\r\n\r\n  const encodeImageFileAsURL = (element) => {\r\n        let file = element.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.onloadend = function() {\r\n            addBanner(reader.result);\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    }\r\n    return (\r\n        <div style={{position: 'relative', display: 'flex'}}>\r\n            <form onSubmit={(e) => handleSubmit(e)} className=\"round-dark ads\">\r\n                <div>\r\n                    <h2>Ad creative</h2>\r\n                    <div className=\"wrapper-input-file\">\r\n                        <div className=\"label-file\">\r\n                        Select a banner to add <br />\r\n                        275 x 270 px\r\n                        </div>\r\n                        <div className=\"wrap-input\">\r\n                        <label className=\"dashed\" htmlFor=\"ad-file\">\r\n                            <img className=\"image-preview\" src={objData.banner} />\r\n                            \r\n                            <input onChange={(e) => {setFile(e); encodeImageFileAsURL(e)}} type=\"file\" id=\"ad-file\"  />\r\n                        </label>\r\n\r\n                        <label htmlFor=\"ad-file\" className=\"btn-file\">\r\n                            Choose file\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"website-block\">\r\n                    <span className=\"block-description\">Website URL</span>\r\n                    <input\r\n                        value={objData.website_url}\r\n                        type=\"text\"\r\n                        placeholder={objData.website_url}\r\n                    />\r\n                </div>\r\n                <hr/>\r\n                <div className='audience section-block'>\r\n                    <h2 className='audience__title section-title'>Audience</h2>\r\n                    <span className='country-block'>\r\n                        <p className='country-block__title opacity-name'>Country</p>\r\n                        <p className='country-block__country'>{Object.keys(objData.country_timezone)[0] || null}</p>\r\n                    </span>\r\n                    <span className='time-zone-block'>\r\n                        <p className='time-zone__title opacity-name'>Time zone</p>\r\n                        <p className='time-zone__time-zone'>UTC {objData.country_timezone[`${Object.keys(objData.country_timezone)[0]}`] || null}</p>\r\n\r\n                    </span>\r\n                </div>\r\n                <hr/>\r\n                <div className='timeAds section-block'>\r\n                    <h2 className='timeAds__title section-title'>Time</h2>\r\n                    <span className='start-time-block'>\r\n                        <p className='start-time-block__title opacity-name'>Started</p>\r\n                        <p className='start-time-block__time'>{objData.start_date}</p>\r\n                    </span>\r\n                    <span className='finished-time-block'>\r\n                        <p className='finished-time-block__title opacity-name'>Finished</p>\r\n                        <p className='finished-time-block__time'>{objData.end_date}</p>\r\n                    </span>\r\n                    {/*<span className='total-time-block'>*/}\r\n                    {/*    <p className='total-time-block__title opacity-name'>Total time</p>*/}\r\n                    {/*    <p className='total-time-block__total-time total-time'>8h 30 mins</p>*/}\r\n                    {/*</span>*/}\r\n                </div>\r\n                <hr/>\r\n                <div className='results section-block'>\r\n                <h2 className='result__title section-title'>Results</h2>\r\n                    <span className='displays-block'>\r\n                        <p className='displays-block__title opacity-name'>Displays</p>\r\n                        <p className='displays-block__time result-data'>{+objData.displays}</p>\r\n                    </span>\r\n                    <span className='clicks-block'>\r\n                        <p className='clicks-block__title opacity-name'>Clicks</p>\r\n                        <p className='clicks-block__time result-data'>{+objData.clicks}</p>\r\n                    </span>\r\n                    <span className='budget-block'>\r\n                        <p className='budget-block__title opacity-name'>Budget</p>\r\n                        <p className='budget-block__total-time result-data currency-block'>{+objData.budget}\r\n                            <span className='dollar'>&#36;</span>\r\n                            {/* <span className='btn-block'>\r\n                                0.035\r\n                                <span className='btn'>&#8383;</span>\r\n                            </span> */}\r\n                        </p>\r\n                    </span>\r\n                </div>\r\n                <div className=\"footer foter-BTNs\" style={{marginTop: '53px'}}>\r\n                    <button type=\"submit\" className='myAd-btn'>Change</button>\r\n                    <button className='myAd-btn'>Repeat</button>\r\n                </div>\r\n            </form>\r\n            <Wallet input={true}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        objData: state.adsOptions.adDetail\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addBanner\r\n}\r\n\r\nexport default connect(mapStateToProps, addBanner)(MyAd)\r\n",{"ruleId":"364","severity":1,"message":"365","line":6,"column":8,"nodeType":"366","messageId":"367","endLine":6,"endColumn":17},{"ruleId":"368","severity":1,"message":"369","line":77,"column":33,"nodeType":"370","messageId":"371","endLine":77,"endColumn":49},{"ruleId":"372","severity":1,"message":"373","line":70,"column":8,"nodeType":"374","endLine":70,"endColumn":27,"suggestions":"375"},{"ruleId":"376","severity":1,"message":"377","line":79,"column":29,"nodeType":"378","endLine":79,"endColumn":137},{"ruleId":"379","severity":1,"message":"380","line":107,"column":33,"nodeType":"378","endLine":112,"endColumn":61},{"ruleId":"372","severity":1,"message":"381","line":45,"column":8,"nodeType":"374","endLine":45,"endColumn":21,"suggestions":"382"},{"ruleId":"372","severity":1,"message":"383","line":69,"column":8,"nodeType":"374","endLine":69,"endColumn":23,"suggestions":"384"},{"ruleId":"364","severity":1,"message":"385","line":20,"column":9,"nodeType":"366","messageId":"367","endLine":20,"endColumn":16},{"ruleId":"364","severity":1,"message":"386","line":18,"column":8,"nodeType":"366","messageId":"367","endLine":18,"endColumn":20},{"ruleId":"364","severity":1,"message":"387","line":27,"column":8,"nodeType":"366","messageId":"367","endLine":27,"endColumn":20},{"ruleId":"372","severity":1,"message":"388","line":34,"column":39,"nodeType":"374","endLine":34,"endColumn":41,"suggestions":"389"},{"ruleId":"364","severity":1,"message":"390","line":36,"column":11,"nodeType":"366","messageId":"367","endLine":36,"endColumn":15},{"ruleId":"364","severity":1,"message":"391","line":5,"column":68,"nodeType":"366","messageId":"367","endLine":5,"endColumn":76},{"ruleId":"372","severity":1,"message":"392","line":8,"column":7,"nodeType":"374","endLine":8,"endColumn":12,"suggestions":"393"},{"ruleId":"364","severity":1,"message":"394","line":2,"column":8,"nodeType":"366","messageId":"367","endLine":2,"endColumn":15},{"ruleId":"364","severity":1,"message":"395","line":20,"column":20,"nodeType":"366","messageId":"367","endLine":20,"endColumn":29},{"ruleId":"364","severity":1,"message":"396","line":40,"column":11,"nodeType":"366","messageId":"367","endLine":40,"endColumn":27},{"ruleId":"376","severity":1,"message":"377","line":131,"column":17,"nodeType":"378","endLine":131,"endColumn":89},{"ruleId":"364","severity":1,"message":"397","line":6,"column":8,"nodeType":"366","messageId":"367","endLine":6,"endColumn":13},{"ruleId":"372","severity":1,"message":"398","line":84,"column":8,"nodeType":"374","endLine":84,"endColumn":21,"suggestions":"399"},{"ruleId":"372","severity":1,"message":"400","line":100,"column":8,"nodeType":"374","endLine":100,"endColumn":37,"suggestions":"401"},{"ruleId":"372","severity":1,"message":"402","line":110,"column":8,"nodeType":"374","endLine":110,"endColumn":18,"suggestions":"403"},{"ruleId":"372","severity":1,"message":"404","line":119,"column":8,"nodeType":"374","endLine":119,"endColumn":24,"suggestions":"405"},{"ruleId":"376","severity":1,"message":"377","line":199,"column":21,"nodeType":"378","endLine":199,"endColumn":79},{"ruleId":"376","severity":1,"message":"377","line":200,"column":21,"nodeType":"378","endLine":200,"endColumn":81},{"ruleId":"372","severity":1,"message":"406","line":11,"column":11,"nodeType":"407","endLine":13,"endColumn":6},{"ruleId":"372","severity":1,"message":"408","line":21,"column":8,"nodeType":"374","endLine":21,"endColumn":36,"suggestions":"409"},{"ruleId":"364","severity":1,"message":"391","line":2,"column":45,"nodeType":"366","messageId":"367","endLine":2,"endColumn":53},{"ruleId":"364","severity":1,"message":"410","line":2,"column":10,"nodeType":"366","messageId":"367","endLine":2,"endColumn":14},{"ruleId":"364","severity":1,"message":"411","line":5,"column":9,"nodeType":"366","messageId":"367","endLine":5,"endColumn":14},{"ruleId":"364","severity":1,"message":"410","line":2,"column":10,"nodeType":"366","messageId":"367","endLine":2,"endColumn":14},{"ruleId":"364","severity":1,"message":"412","line":13,"column":12,"nodeType":"366","messageId":"367","endLine":13,"endColumn":26},{"ruleId":"364","severity":1,"message":"413","line":13,"column":28,"nodeType":"366","messageId":"367","endLine":13,"endColumn":45},{"ruleId":"414","replacedBy":"415"},{"ruleId":"416","replacedBy":"417"},{"ruleId":"376","severity":1,"message":"377","line":32,"column":31,"nodeType":"378","endLine":32,"endColumn":77},{"ruleId":"376","severity":1,"message":"377","line":34,"column":15,"nodeType":"378","endLine":34,"endColumn":60},{"ruleId":"364","severity":1,"message":"418","line":1,"column":16,"nodeType":"366","messageId":"367","endLine":1,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":3,"column":1,"nodeType":"421","endLine":13,"endColumn":3},{"ruleId":"372","severity":1,"message":"422","line":49,"column":6,"nodeType":"374","endLine":49,"endColumn":46,"suggestions":"423"},{"ruleId":"364","severity":1,"message":"424","line":27,"column":11,"nodeType":"366","messageId":"367","endLine":27,"endColumn":19},{"ruleId":"364","severity":1,"message":"385","line":10,"column":9,"nodeType":"366","messageId":"367","endLine":10,"endColumn":16},{"ruleId":"364","severity":1,"message":"425","line":1,"column":10,"nodeType":"366","messageId":"367","endLine":1,"endColumn":13},{"ruleId":"364","severity":1,"message":"426","line":10,"column":5,"nodeType":"366","messageId":"367","endLine":10,"endColumn":17},{"ruleId":"372","severity":1,"message":"427","line":25,"column":8,"nodeType":"374","endLine":25,"endColumn":19,"suggestions":"428"},{"ruleId":"372","severity":1,"message":"429","line":32,"column":8,"nodeType":"374","endLine":32,"endColumn":10,"suggestions":"430"},{"ruleId":"372","severity":1,"message":"431","line":14,"column":8,"nodeType":"374","endLine":14,"endColumn":10,"suggestions":"432"},{"ruleId":"433","severity":1,"message":"434","line":50,"column":18,"nodeType":"435","messageId":"436","endLine":50,"endColumn":29},{"ruleId":"433","severity":1,"message":"434","line":51,"column":19,"nodeType":"435","messageId":"436","endLine":51,"endColumn":30},{"ruleId":"364","severity":1,"message":"437","line":8,"column":12,"nodeType":"366","messageId":"367","endLine":8,"endColumn":17},{"ruleId":"376","severity":1,"message":"377","line":36,"column":29,"nodeType":"378","endLine":36,"endColumn":83},{"ruleId":"364","severity":1,"message":"438","line":122,"column":7,"nodeType":"366","messageId":"367","endLine":122,"endColumn":25},"no-unused-vars","'arrow_btn' is defined but never used.","Identifier","unusedVar","no-control-regex","Unexpected control character(s) in regular expression: \\x00.","Literal","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'prohibition'. Either include it or remove the dependency array. If 'prohibition' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["439"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'start'. Either include it or remove the dependency array.",["440"],"React Hook useEffect has missing dependencies: 'bet', 'course', 'lastSeconds', 'start', and 'startWin'. Either include them or remove the dependency array. If 'startWin' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["441"],"'history' is assigned a value but never used.","'JS_FIREWORKS' is defined but never used.","'closePreview' is defined but never used.","React Hook useEffect has a missing dependency: 'switchView'. Either include it or remove the dependency array. If 'switchView' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["442"],"'LANG' is assigned a value but never used.","'FIRST_IN' is defined but never used.","React Hook useEffect has a missing dependency: 'geoposition'. Either include it or remove the dependency array. If 'geoposition' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["443"],"'bitcoin' is defined but never used.","'setBanner' is assigned a value but never used.","'isPreviewHandler' is assigned a value but never used.","'store' is defined but never used.","React Hook useEffect has missing dependencies: 'gameStart', 'predictSubmit', and 'startGame'. Either include them or remove the dependency array.",["444"],"React Hook useEffect has missing dependencies: 'playBetTimer', 'playGameTimer', 'playTimer', 'playTimer2', 'stopBetTimer', and 'stopGameTimer'. Either include them or remove the dependency array. If 'stopBetTimer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["445"],"React Hook useEffect has missing dependencies: 'closeYourLose' and 'you_lose'. Either include them or remove the dependency array. If 'you_lose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["446"],"React Hook useEffect has missing dependencies: 'closeCongratulation' and 'playYouWon'. Either include them or remove the dependency array. If 'playYouWon' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["447"],"The 'muted' function makes the dependencies of useEffect Hook (at line 25) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'muted' in its own useCallback() Hook.","VariableDeclarator","React Hook useEffect has a missing dependency: 'stop'. Either include it or remove the dependency array. If 'stop' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["448"],"'Link' is defined but never used.","'click' is defined but never used.","'clickOnWalllet' is assigned a value but never used.","'setClickOnWalllet' is assigned a value but never used.","no-native-reassign",["449"],"no-negated-in-lhs",["450"],"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'isCorrectDate', 'isStartDate', and 'setIsCorrectDateToStore'. Either include them or remove the dependency array. If 'setIsCorrectDateToStore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["451"],"'closeBtn' is assigned a value but never used.","'act' is defined but never used.","'SET_TIMEZONE' is defined but never used.","React Hook useEffect has missing dependencies: 'currentList' and 'finishedList'. Either include them or remove the dependency array. If 'setArrList' needs the current value of 'currentList', you can also switch to useReducer instead of useState and read 'currentList' in the reducer.",["452"],"React Hook useEffect has missing dependencies: 'currentList' and 'getCurrentList'. Either include them or remove the dependency array. If 'getCurrentList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["453"],"React Hook useEffect has missing dependencies: 'changeDemo' and 'isDemo'. Either include them or remove the dependency array. If 'changeDemo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["454"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'image' is assigned a value but never used.","'mapDispatchToProps' is assigned a value but never used.",{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},"no-global-assign","no-unsafe-negation",{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},"Update the dependencies array to be: [location.pathname, prohibition]",{"range":"483","text":"484"},"Update the dependencies array to be: [lastSeconds, start]",{"range":"485","text":"486"},"Update the dependencies array to be: [bet, course, currentCourse, lastSeconds, start, startWin]",{"range":"487","text":"488"},"Update the dependencies array to be: [switchView]",{"range":"489","text":"490"},"Update the dependencies array to be: [geo, geoposition]",{"range":"491","text":"492"},"Update the dependencies array to be: [gameStart, lastSeconds, predictSubmit, startGame]",{"range":"493","text":"494"},"Update the dependencies array to be: [startGame, timeBet, predict, stopBetTimer, playGameTimer, playTimer, stopGameTimer, playBetTimer, playTimer2]",{"range":"495","text":"496"},"Update the dependencies array to be: [closeYourLose, you_lose, yourlose]",{"range":"497","text":"498"},"Update the dependencies array to be: [closeCongratulation, congratulation, playYouWon]",{"range":"499","text":"500"},"Update the dependencies array to be: [param.id, play, handlePlay, stop]",{"range":"501","text":"502"},"Update the dependencies array to be: [dateStart, timeStart, dateEnd, timeEnd, isStartDate, isCorrectDate, setIsCorrectDateToStore]",{"range":"503","text":"504"},"Update the dependencies array to be: [currentList, finishedList, isCurrent]",{"range":"505","text":"506"},"Update the dependencies array to be: [currentList, getCurrentList]",{"range":"507","text":"508"},"Update the dependencies array to be: [changeDemo, isDemo]",{"range":"509","text":"510"},[2564,2583],"[location.pathname, prohibition]",[1587,1600],"[lastSeconds, start]",[2471,2486],"[bet, course, currentCourse, lastSeconds, start, startWin]",[1418,1420],"[switchView]",[233,238],"[geo, geoposition]",[2887,2900],"[gameStart, lastSeconds, predictSubmit, startGame]",[3279,3308],"[startGame, timeBet, predict, stopBetTimer, playGameTimer, playTimer, stopGameTimer, playBetTimer, playTimer2]",[3503,3513],"[closeYourLose, you_lose, yourlose]",[3720,3736],"[closeCongratulation, congratulation, playYouWon]",[707,735],"[param.id, play, handlePlay, stop]",[1730,1770],"[dateStart, timeStart, dateEnd, timeEnd, isStartDate, isCorrectDate, setIsCorrectDateToStore]",[945,956],"[currentList, finishedList, isCurrent]",[1102,1104],"[currentList, getCurrentList]",[476,478],"[changeDemo, isDemo]"]